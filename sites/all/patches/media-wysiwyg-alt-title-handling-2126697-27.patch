diff --git a/modules/media_wysiwyg/js/media_wysiwyg.filter.js b/modules/media_wysiwyg/js/media_wysiwyg.filter.js
index 5ac10ec..ff8efb2 100644
--- a/modules/media_wysiwyg/js/media_wysiwyg.filter.js
+++ b/modules/media_wysiwyg/js/media_wysiwyg.filter.js
@@ -61,6 +61,63 @@
     },
 
     /**
+     * Returns alt and title field values for use as html attributes. Ensures
+     * changes made via the media popup persist into the macro as title/alt
+     * attributes.
+     *
+     * @param options (array)
+     *   Options passed through a popup form submission.
+     */
+    parseAttributeFields: function(options) {
+      var attributes = [];
+
+      for (field in options) {
+        if (field.match('image_alt')) {
+          attributes['alt'] = options[field];
+        }
+
+        if (field.match('image_title')) {
+          attributes['title'] = options[field];
+        }
+      }
+
+      return attributes;
+    },
+
+    /**
+     * Ensures changes made to fielded attributes persist set to the field(s).
+     *
+     * @param file_info (object)
+     *   A json decoded object of the file being inserted/updated.
+     */
+    syncAttributesToFields: function(file_info) {
+      // If the title attribute has changed, ensure the title field is updated.
+      if (!file_info) {
+        file_info = {};
+      }
+      if (!file_info.attributes) {
+        file_info.attributes = {};
+      }
+      if (!file_info.fields) {
+        file_info.fields = {};
+      }
+      var titleAttr  = file_info.attributes.title || false;
+      var titleField = file_info.fields['field_file_image_title_text[und][0][value]'] || false;
+      if (titleAttr !== titleField) {
+        file_info.fields['field_file_image_title_text[und][0][value]'] = titleAttr;
+      }
+
+      // If the alt attribute has changed, ensure the alt field is updated.
+      var altAttr  = file_info.attributes.alt || false;
+      var altField = file_info.fields['field_file_image_alt_text[und][0][value]'] || false;
+      if (altAttr !== altField) {
+        file_info.fields['field_file_image_alt_text[und][0][value]'] = altAttr;
+      }
+
+      return file_info;
+    },
+
+    /**
      * Replaces media elements with tokens.
      *
      * @param content (string)
@@ -197,7 +254,7 @@
         }
       }
 
-      return file_info;
+      return Drupal.media.filter.syncAttributesToFields(file_info);
     },
 
     /**
diff --git a/modules/media_wysiwyg/js/wysiwyg-media.js b/modules/media_wysiwyg/js/wysiwyg-media.js
index af99097..62ed2f1 100644
--- a/modules/media_wysiwyg/js/wysiwyg-media.js
+++ b/modules/media_wysiwyg/js/wysiwyg-media.js
@@ -110,12 +110,15 @@ InsertMedia.prototype = {
    * tagmap.
    */
   insert: function (formatted_media) {
+    var attributes = Drupal.media.filter.parseAttributeFields(formatted_media.options);
+
     var element = Drupal.media.filter.create_element(formatted_media.html, {
           fid: this.mediaFile.fid,
           view_mode: formatted_media.type,
-          attributes: formatted_media.options,
+          attributes: $.extend(this.mediaFile.attributes, attributes),
           fields: formatted_media.options
         });
+
     // Get the markup and register it for the macro / placeholder handling.
     var markup = Drupal.media.filter.getWysiwygHTML(element);
 
