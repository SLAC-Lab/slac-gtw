<?php
/**
 * @file
 * Code for the SLAC IGP Email feature.
 */

include_once 'slac_igp_email.features.inc';
define('VIEW_MODE_TEASER', 'teaser');
define('VIEW_MODE_LINK', 'link');
define('DIRECTOR_COLUMN', 'DIRECTOR\'S COLUMNS');


/**
 * Implements hook_field_formatter_info
 */
function slac_igp_email_field_formatter_info() {
  return array(
    'link_image' => array(
      'label' => t('URL, as rendered image'),
      'field types' => array('link_field'),
      'settings' => array(
          'width' => 'Width',
          'height' => 'Height',
        ),
      // 'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );  
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function slac_igp_email_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#element_validate' => array('_slac_igp_email_element_validate'),
  );

  $element['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#element_validate' => array('_slac_igp_email_element_validate'),
  );
  
  return $element;
}

/**
 * Element validation function
 */
function _slac_igp_email_element_validate($element, &$form_state, $form) {
  if (!empty($element['#value'])) {
    $val = (int) $element['#value'];
    if (!is_int($val) || $val == 0) {
      form_error($element, t('Please enter an integer value greater than 0'));
    }
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function slac_igp_email_field_formatter_settings_summary($field, $instance, $view_mode) {
   $display = $instance['display'][$view_mode];
   $settings = $display['settings'];
   $summary = sprintf('Width: %s, Height: %s', $settings['width'], $settings['height']);
   
   return $summary;
}

/**
 * Implements hook_preprocess_image().
 *
 * Adds attributes for teaser view mode that is used in mailchimp emails.
 */
function slac_igp_email_preprocess_image(&$vars) {
  if (isset($vars['style_name']) && $vars['style_name'] == 'teaser') {
    $attributes = array(
      'align' => 'left',
      'hspace' => '20'
    );
    $vars['attributes'] = $attributes;
  }
}

/**
 * Implements hook_preprocess_field().
 *
 * Sets the alt and title text for images if they aren't set.
 * Only affects the teaser view mode which is used in mailchimp
 * emails
 */
function slac_igp_email_preprocess_field(&$vars) {
  $element = $vars['element'];
  if ($element['#field_name'] == 'field_shared_image' && $element['#view_mode'] == 'teaser') {
    foreach ($vars['items'] as $delta => $item) {
      if (empty($item['#item']['field_file_image_alt_text'])) {
        $vars['items'][$delta]['#item']['alt'] = $item['#item']['filename'];
      }
      if (empty($item['#item']['field_file_image_title_text'])) {
        $vars['items'][$delta]['#item']['title'] = $item['#item']['filename'];
      }
    }
  }
}

/**
 * Implements hook_cron
 */
function slac_igp_email_cron() {
  // Implementing a simple cron that will re-subscribe people to the weekly email
  $listid = variable_get('mailchimp_list_sync_list', '');
  if ($listid === '') {
    return;
  }
  $mcapi = mailchimp_get_api_object();
  $ret = $mcapi->listMembers($listid, 'unsubscribed');   
  if (empty($ret['data'])) {
    return;
  }
  // re-subscribe to user
  // declare an rules event
  foreach ($ret['data'] as $item) {
    $ret = $mcapi->listSubscribe($listid, $item['email'], array(), 'html', FALSE, FALSE, FALSE, FALSE);
    if (!$ret) {
      watchdog('slac_igp_email', 'MCAPI Error when calling listSubscribe on %email, Error code: %errcode, Error message: %errmsg', array('%email' => $item['email'], '%errcode' => $mcapi->errorCode,'%errmsg' => $mcapi->errorMessage), WATCHDOG_ERROR);
      return;
    }
    // invoke a rules component
    rules_invoke_component('rules_slac_igp_email_resubscription', $item['email']);
  }
}

/**
 * Implements hook_theme
 */
function slac_igp_email_theme() {
  return array(
    'slac_igp_email_sidebar' => array(
      'variables' => array(
        'events' => NULL,
        'access' => NULL,
        'flea_market' => NULL,
      ),
      'template' => 'slac_igp_email_sidebar',
    ),
    'slac_igp_email' => array(
      'variables' => array(
        'featured_news' => NULL,
        'news' => NULL,
        'config' => NULL,
      ),
      'template' => 'slac_igp_email',
    ),
    'slac_igp_director_column' => array(
      'variables' => array(
        'directors_column' => NULL,
      ),
      'template' => 'slac_igp_director_column',
    ),
    'slac_igp_email_title' => array(
      'variables' => array(
        'type' => NULL,
      ),
    ),
  ); 
}

/**
 * Implements hook_form_FORM_ID_alter
 * The mailchimp list name in Drupal must be (Daliy Email [daily_email])
 */ 
function slac_igp_email_form_mailchimp_lists_user_subscribe_form_daily_email_alter(&$form, &$form_state, $form_id) {
  $form['submit']['#value'] = t('Subscribe');
  hide($form['mailchimp_lists']['mailchimp_daily_email']['title']);
  hide($form['mailchimp_lists']['mailchimp_daily_email']['mergevars']['FNAME']);
  hide($form['mailchimp_lists']['mailchimp_daily_email']['mergevars']['LNAME']);
  
  $form['#validate'][] = 'slac_igp_email_mailchimp_signup_validate';
}

function slac_igp_email_mailchimp_signup_validate($form, &$form_state) {
  $email = $form_state['values']['mailchimp_lists']['mailchimp_daily_email']['mergevars']['EMAIL'];
  $email_domain = trim(substr($email, strpos($email, '@') + 1));
  if (strtolower($email_domain) != 'slac.stanford.edu') {
    form_set_error('mailchimp_lst][mailchimp_daily_email][mergevars][EMAIL', t('Only slac.stanford.edu email address is allowed to subscribe'));
  }
  
  
}

/**
 * Implements hook_mailchimp_dc_content
 */
function slac_igp_email_mailchimp_dc_content($config = array(), $template_sections = array()) {
  
  // declare contents in the daily digest  
  $data['SLAC_DD'] = array(
    'module' => 'slac_igp_email',
    'title' => t('SLAC daily digest'),
    'content' => _slac_igp_email_mailchimp_dc_content($config, $template_sections),
  );
  
  // declare contents in the weekly digest
  $data['SLAC_WD'] = array(
    'module' => 'slac_igp_email',
    'title' => t('SLAC weekly digest'),
    'content' => _slac_igp_email_mailchimp_weekly_content($config, $template_sections),
  );
  
  return $data;
}

/**
 * Implements hook_mailchimp_dc_vbo_content
 */
function slac_igp_email_mailchimp_dc_vbo_content($context) {
	// let's add a line break for outlook for director's column for weekly email template
	if ($context['mc_template'] == 'lead_news') {
		return '<br clear="all" />';	
	}
}

/**
 * Theme function 
 */
function theme_slac_igp_email_title($vars) {
  return '<h2>' . date('F j, Y') . '<br />' . $vars['type'] . ' Email</h2>';
}

/**
 * Return contents to the mailchimp templates for weekly email
 */
function _slac_igp_email_mailchimp_weekly_content($config, $template_sections) {
  //@todo: iterate through the template_sections
  return array(
    'html_lead_news' => array(
      'value' => theme('slac_igp_director_column'),
      'format' => 'mailchimp_campaign',
    ),
    'html_std_header_title' => array(
      'value' => theme('slac_igp_email_title', array('type' => 'Weekly')),
      'format' => 'mailchimp_campaign',
    ),
  );
}

/**
 * Return contents to the mailchimp templates
 */
function _slac_igp_email_mailchimp_dc_content($config, $template_sections) {
  //@todo: iterate through the template_sections
  return array(
    'html_sidebar' => array(
      'value' => theme('slac_igp_email_sidebar'),
      'format' => 'mailchimp_campaign',
    ),
    'html_news' => array(
      'value' => theme('slac_igp_email', array('config' => $config)),
      'format' => 'mailchimp_campaign',
    ),
    'html_std_header_title' => array(
      'value' => theme('slac_igp_email_title', array('type' => 'Daily')),
      'format' => 'mailchimp_campaign',
    ),
  );
}

/**
 * Preprocess function, finds and add director's column
 */
function slac_igp_email_preprocess_slac_igp_director_column(&$vars) {
  // director's column is an news article tagged with "Director's Column"
  $term = taxonomy_get_term_by_name(strtolower(DIRECTOR_COLUMN));
  if (!empty($term)) {
    $keys = array_keys($term);
    $tid = $keys[0];
  }
  $select = db_select('node', 'n');
  $select->join('publication_date', 'p', 'n.nid = p.nid');
  $select->join('field_data_field_shared_tags','tags','n.nid = tags.entity_id');
  $select->join('field_data_field_shared_promote_news','promote_news','n.nid = promote_news.entity_id');
  $select->addField('n', 'nid');
  $select->condition('n.status', 1);
  $select->condition('n.type', array('access_information', 'event', 'news'), 'IN');
  $select->condition('tags.field_shared_tags_tid', $tid);
  $select->condition('promote_news.field_shared_promote_news_value', 1);
  $select->orderBy('p.published_at', 'DESC');
  $select->range(0, 1);
  $results = $select->execute()->fetchAll();
  if (!empty($results)) {
    $node = current($results);
    $vars['director_column'] = '[mailchimp_campaign|entity_type=node|entity_id=' . $node->nid . '|view_mode=teaser]';
  }
}

/**
 * Preprocess function
 */
function slac_igp_email_preprocess_slac_igp_email_sidebar(&$vars) {
  // provide dynamic sidebar items
  $vars['events'] = views_embed_view('email_events', 'block');
  $vars['access'] = views_embed_view('email_access_information', 'block');
  $vars['flea_market'] = views_embed_view('email_flea_market', 'block');
}

/**
 * Preprocess function, providing main contents for the email
 */
function slac_igp_email_preprocess_slac_igp_email(&$vars) {
  // initiate empty arrays
  $vars['featured_news'] = array();
  $vars['news'] = array();

  $config = $vars['config'];
  if (empty($config)) {
    return;
  }
  // load the last email campaign
  module_load_include('inc', 'mailchimp_dc', 'mailchimp_dc.database');
  $last_campaign = array();
  $last_campaign = mailchimp_dc_load_dc($config['name']);

  if (variable_get('mailchimp_dc_' . $config['name'] . '_daily_additional', 0) == 1 && $config['schedule_type'] === 'daily') {
    // additional filtering based on nodequeue
    $vars['featured_news'] = _slac_igp_email_generate_items_views('promoted', $last_campaign);
    $vars['news'] = _slac_igp_email_generate_items_views('regular', $last_campaign);
  }
  else {
    $vars['featured_news'] = _slac_igp_email_generate_items('promoted', $last_campaign);
    $vars['news'] = _slac_igp_email_generate_items('regular', $last_campaign);
  }
}

/**
 * Generate daily email items from the last campaign
 * @params
 * $type    type of news item
 */
function _slac_igp_email_generate_items($type, $last_campaign = array()) {
  $data = array();
  if ($type == 'promoted') {
    $mode = VIEW_MODE_TEASER;
  } else {
    $mode = VIEW_MODE_LINK;
  }
  $select = db_select('node', 'n');
  $select->join('publication_date', 'p', 'n.nid = p.nid');
  $select->join('field_data_field_shared_promote_news','promote_news','n.nid = promote_news.entity_id');
  $select->addField('n', 'nid');
  $select->condition('n.status', 1);
  $select->condition('n.type', array('access_information', 'event', 'news'), 'IN');
  $select->condition('promote_news.field_shared_promote_news_value', 1);
  if ($type == 'promoted') {
    $select->condition('n.promote', 1);
  }
  else {
    $select->condition('n.promote', 0);
  }
  if (!empty($last_campaign)) {
    $select->condition('p.published_at', $last_campaign['timestamp'], '>');
  }
  $select->orderBy('p.published_at', 'DESC');
  $select->range(0, 10);
  $results = $select->execute()->fetchAll();
  if (!empty($results)) {
    foreach ($results as $key => $node) {
      $data[] = '[mailchimp_campaign|entity_type=node|entity_id=' . $node->nid . '|view_mode=' . $mode . ']';
    }
  }
  return $data;
}

function _slac_igp_email_generate_items_views($type, $last_campaign = array()) {

  $data = array();
  if ($type == 'promoted') {
    $mode = VIEW_MODE_TEASER;
  } else {
    $mode = VIEW_MODE_LINK;
  }
  $select = db_select('node', 'n');
  $select->join('publication_date', 'p', 'n.nid = p.nid');
  $select->join('field_data_field_shared_promote_news','promote_news','n.nid = promote_news.entity_id');
  $select->addField('n', 'nid');
  $select->condition('n.status', 1);
  $select->condition('n.type', array('access_information', 'event', 'news'), 'IN');
  $select->condition('promote_news.field_shared_promote_news_value', 1);
  if ($type == 'promoted') {
    $select->condition('n.promote', 1);
  }
  else {
    $select->condition('n.promote', 0);
  }
  if (!empty($last_campaign)) {
    $select->condition('p.published_at', $last_campaign['timestamp'], '>');
  }
  $select->orderBy('p.published_at', 'DESC');
  $select->range(0, 10);
  $results = $select->execute()->fetchAll();
  if (!empty($results)) {
    foreach ($results as $key => $node) {
      if (_slac_igp_email_check_in_view($node->nid) === TRUE) {
        $data[] = '[mailchimp_campaign|entity_type=node|entity_id=' . $node->nid . '|view_mode=' . $mode . ']';
      }
    }
  }
  return $data;
}

/**
 * Check to see if a given node (nid) exists in the news views
 * @param $nid
 * @return bool
 */
function _slac_igp_email_check_in_view($nid) {
  // @[views_name]|[view_display]
  $mapping = array(
    'slac_news|block', //
    'slac_news|block_1', // lab news,
    'slac_news|block_2', // slac science (featured)
    'slac_news|block_3', // feature news slide show
    'slac_news|attachment_1', // slac science
  );
  $items = array();
  foreach ($mapping as $view_meta) {
    $v = explode('|', $view_meta);
    $view_name = $v[0];
    $view_display = $v[1];

    $view = views_get_view($view_name);
    if ($view) {
      $view->execute($view_display);
      if (!empty($view->result)) {
        foreach ($view->result as $item) {
          $items[] = $item->nid;
        }
      }
    }
  }
  $items = array_unique($items);
  return in_array($nid, $items);
}


/**
 * Implements hook_form_alter
 */
function slac_igp_email_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id != 'mailchimp_dc_configuration_form') {
    return;
  }
  if (empty($form_state['config'])) {
    return;
  }

  $config = $form_state['config'];

  $form['expiration_settings'] = array(
    '#type' => 'checkbox',
    '#title' => 'Use Views Settings',
    '#description' => t('Checking this will limit the generated daily email items to those that appears on the home page in addition to the time elapsed. This setting only affect daily email types'),
    '#weight' => 0,
    '#default_value' => variable_get('mailchimp_dc_' . $config['name'] . '_daily_additional', 0),
  );
  $form['#submit'][] = 'slac_igp_email_mailchimp_expiration';
}

/**
 * Form submission callback
 * @param $form
 * @param $form_state
 */
function slac_igp_email_mailchimp_expiration($form, &$form_state) {
  $config = $form_state['config'];
  variable_set('mailchimp_dc_' . $config['name'] . '_daily_additional', $form_state['values']['expiration_settings']);
}
