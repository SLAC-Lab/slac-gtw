<?php
/**
 * @file
 * Code for the SLAC IGP Email feature.
 */

include_once 'slac_igp_email.features.inc';
define('VIEW_MODE_TEASER', 'teaser');
define('VIEW_MODE_LINK', 'link');
define('DIRECTOR_COLUMN', 'DIRECTOR\'S COLUMNS');
define('IMAGE_SOURCE_FIELD', 'field_news_image_source');

/**
 * The "ID" of a publically-accessible directory to which images are copied.
 *
 * 'https://www.slac.stanford.edu/slac/www/' . this ID number will be used.
 */
define('SLAC_IGP_EMAIL_PUBLIC_SITE_DIR_ID_STAGE', 394);
define('SLAC_IGP_EMAIL_PUBLIC_SITE_DIR_ID_PROD', 546);


/**
 * Implements hook_og_tag_importer_import_alter
 * adding image source when importing og content
 */
function slac_igp_email_og_tag_importer_import_alter(&$wrapper, &$data) {
	foreach ($data as $field_name => $values) {
		$field_info = field_info_field($field_name);
		if ($field_info['module']	== 'image') {
			$wrapper->{IMAGE_SOURCE_FIELD}->set(array('url' => $values[0]));	
		}
	}
}

/**
 * Implements hook_cron
 */
function slac_igp_email_cron() {
  // Implementing a simple cron that will re-subscribe people to the weekly email
  $listid = variable_get('mailchimp_list_sync_list', '');
  if ($listid === '') {
    return;
  }
  $mcapi = mailchimp_get_api_object();
  $ret = $mcapi->listMembers($listid, 'unsubscribed');   
  if (empty($ret['data'])) {
    return;
  }
  // re-subscribe to user
  // declare an rules event
  foreach ($ret['data'] as $item) {
    $ret = $mcapi->listSubscribe($listid, $item['email'], array(), 'html', FALSE, FALSE, FALSE, FALSE);
    if (!$ret) {
      watchdog('slac_igp_email', 'MCAPI Error when calling listSubscribe on %email, Error code: %errcode, Error message: %errmsg', array('%email' => $item['email'], '%errcode' => $mcapi->errorCode,'%errmsg' => $mcapi->errorMessage), WATCHDOG_ERROR);
      return;
    }
    // invoke a rules component
    rules_invoke_component('rules_slac_igp_email_resubscription', $item['email']);
  }
}

/**
 * Implements hook_theme
 */
function slac_igp_email_theme() {
  return array(
    'slac_igp_email_sidebar' => array(
      'variables' => array(
        'events' => NULL,
        'access' => NULL,
        'flea_market' => NULL,
      ),
      'template' => 'slac_igp_email_sidebar',
    ),
    'slac_igp_email' => array(
      'variables' => array(
        'featured_news' => NULL,
        'news' => NULL,
        'config' => NULL,
      ),
      'template' => 'slac_igp_email',
    ),
    'slac_igp_director_column' => array(
      'variables' => array(
        'directors_column' => NULL,
      ),
      'template' => 'slac_igp_director_column',
    ),
    'slac_igp_email_title' => array(
      'variables' => array(
        'type' => NULL,
        'config' => array(),
      ),
    ),
  ); 
}

/**
 * Implements hook_form_FORM_ID_alter
 * The mailchimp list name in Drupal must be (Daliy Email [daily_email])
 */ 
function slac_igp_email_form_mailchimp_lists_user_subscribe_form_daily_email_alter(&$form, &$form_state, $form_id) {
  $form['submit']['#value'] = t('Subscribe');
  hide($form['mailchimp_lists']['mailchimp_daily_email']['title']);
  hide($form['mailchimp_lists']['mailchimp_daily_email']['mergevars']['FNAME']);
  hide($form['mailchimp_lists']['mailchimp_daily_email']['mergevars']['LNAME']);
  
  $form['#validate'][] = 'slac_igp_email_mailchimp_signup_validate';
}

function slac_igp_email_mailchimp_signup_validate($form, &$form_state) {
  $email = $form_state['values']['mailchimp_lists']['mailchimp_daily_email']['mergevars']['EMAIL'];
  $email_domain = trim(substr($email, strpos($email, '@') + 1));
  if (strtolower($email_domain) != 'slac.stanford.edu') {
    form_set_error('mailchimp_lst][mailchimp_daily_email][mergevars][EMAIL', t('Only slac.stanford.edu email address is allowed to subscribe'));
  }
  
  
}

/**
 * Implements hook_mailchimp_dc_content
 */
function slac_igp_email_mailchimp_dc_content($config = array(), $template_sections = array()) {
  
  // declare contents in the daily digest  
  $data['SLAC_DD'] = array(
    'module' => 'slac_igp_email',
    'title' => t('SLAC daily digest'),
    'content' => _slac_igp_email_mailchimp_dc_content($config, $template_sections),
  );
  
  // declare contents in the weekly digest
  $data['SLAC_WD'] = array(
    'module' => 'slac_igp_email',
    'title' => t('SLAC weekly digest'),
    'content' => _slac_igp_email_mailchimp_weekly_content($config, $template_sections),
  );
  
  return $data;
}

/**
 * Implements hook_mailchimp_dc_vbo_content
 */
function slac_igp_email_mailchimp_dc_vbo_content($context) {
	// let's add a line break for outlook for director's column for weekly email template
	if ($context['mc_template'] == 'lead_news') {
		return '<br clear="all" />';	
	}
}

/**
 * Theme function 
 */
function theme_slac_igp_email_title($vars) {
  $config = $vars['config'];
  $timestamp = REQUEST_TIME;
  if (isset($config['send_date'])) {
    $timestamp = $config['send_date'];
  }
  return '<h2>' . date('F j, Y', $timestamp) . '<br />' . $vars['type'] . ' Email</h2>';
}

/**
 * Return contents to the mailchimp templates for weekly email
 */
function _slac_igp_email_mailchimp_weekly_content($config, $template_sections) {
  //@todo: iterate through the template_sections
  return array(
    'html_lead_news' => array(
      'value' => theme('slac_igp_director_column'),
      'format' => 'mailchimp_campaign',
    ),
    'html_std_header_title' => array(
      'value' => theme('slac_igp_email_title', array('type' => 'Weekly', 'config' => $config)),
      'format' => 'mailchimp_campaign',
    ),
  );
}

/**
 * Return contents to the mailchimp templates
 */
function _slac_igp_email_mailchimp_dc_content($config, $template_sections) {
  //@todo: iterate through the template_sections
  return array(
    'html_sidebar' => array(
      'value' => theme('slac_igp_email_sidebar'),
      'format' => 'mailchimp_campaign',
    ),
    'html_news' => array(
      'value' => theme('slac_igp_email', array('config' => $config)),
      'format' => 'mailchimp_campaign',
    ),
    'html_std_header_title' => array(
      'value' => theme('slac_igp_email_title', array('type' => 'Daily')),
      'format' => 'mailchimp_campaign',
    ),
  );
}

/**
 * Preprocess function, finds and add director's column
 */
function slac_igp_email_preprocess_slac_igp_director_column(&$vars) {
  // director's column is an news article tagged with "Director's Column"
  $term = taxonomy_get_term_by_name(strtolower(DIRECTOR_COLUMN));
  if (!empty($term)) {
    $keys = array_keys($term);
    $tid = $keys[0];
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'news_article')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_tags', 'tid', $tid)
    ->propertyOrderBy('created', 'DESC')
    ->range(0, 1);
  $result = $query->execute();
  
  if (!empty($result)) {
    $node = current($result['node']);
    $vars['director_column'] = '[mailchimp_campaign|entity_type=node|entity_id=' . $node->nid . '|view_mode=teaser]';
  }  
}

/**
 * Preprocess function
 */
function slac_igp_email_preprocess_slac_igp_email_sidebar(&$vars) {
  // provide dynamic sidebar items
  $vars['events'] = views_embed_view('email_events', 'block');
  $vars['access'] = views_embed_view('email_access_information', 'block');
  $vars['flea_market'] = views_embed_view('email_flea_market', 'block');
}

/**
 * Preprocess function, providing main contents for the email
 */
function slac_igp_email_preprocess_slac_igp_email(&$vars) {
  // initiate empty arrays
  $vars['featured_news'] = array();
  $vars['news_with_images'] = array();
  $vars['news'] = array();
  
  $config = $vars['config'];
  if (empty($config)) {
    return;
  }
  // load the last email campaign
  module_load_include('inc', 'mailchimp_dc', 'mailchimp_dc.database');
  $last_campaign = array();
  $last_campaign = mailchimp_dc_load_dc($config['name']);

  if (variable_get('mailchimp_dc_' . $config['name'] . '_daily_additional', 0) == 1
    && $config['schedule_type'] === 'daily') {
    // additional filtering based on nodequeue
    $vars['featured_news'] = _slac_igp_email_generate_items_views('promoted', $last_campaign);
    $vars['news_with_images'] = _slac_igp_email_generate_items_views('regular_with_images', $last_campaign);
    $vars['news'] = _slac_igp_email_generate_items_views('regular', $last_campaign);
  }
  else {
    $vars['featured_news'] = _slac_igp_email_generate_items('promoted', $last_campaign);
    $vars['news_with_images'] = _slac_igp_email_generate_items('regular_with_images', $last_campaign);
    $vars['news'] = _slac_igp_email_generate_items('regular', $last_campaign);
  }
}

/**
 * Generate daily email items from the last campaign
 * (With the additional filtering by the nodequeue)
 * (Deprecated -> using views logic to generate items in daily email)
 * @params    
 * $type    type of news item
 */
function _slac_igp_email_generate_items_additional($type, $last_campaign = array()) {
  $data = array();
  if ($type == 'promoted') {
    $mode = VIEW_MODE_TEASER;
  } else {
    $mode = VIEW_MODE_LINK;
  }

  module_load_include('inc', 'slac_igp_feed', 'slac_igp_feed.nodequeue');

  if ($type == 'promoted') {
    $subqueues = array(
      'promoted' => slac_igp_feed_get_subqueue('Featured News'),
    );
  } else {
    $subqueues = array(
      'internal' => slac_igp_feed_get_subqueue('Lab News'),
      'external' => slac_igp_feed_get_subqueue('SLAC Science'),
    );
  }

  foreach ($subqueues as $news_type => $subqueue) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'news_article')
      ->propertyCondition('status', 1);

    if ($news_type == 'promoted') {
      $query->propertyCondition('promote', 1);
    } else {
      // adding field condition to restrict the node retrieved to lab or slac science
      $query->propertyCondition('promote', 0);
      $query->fieldCondition('field_news_type', 'value', $news_type);
    }

    if (!empty($last_campaign)) {
      $query->propertyCondition('created', $last_campaign['timestamp'], '>');
    }
    $query->propertyOrderBy('created', 'DESC');
    $query->range(0, 10);

    $result = $query->execute();
    if (empty($result)) {
      continue;
    }
    // check the specific subqueue expiration settings and its exclusion
    $expiration_setting = variable_get(_slac_igp_feed_subqueue_expiration_varname($subqueue->qid, $subqueue->sqid), '');
    // now we have only the news type corresponding to this subqueue
    foreach ($result['node'] as $item) {
      $node_position = nodequeue_get_subqueue_position($subqueue->sqid, $item->nid);
      // case 1, no expiration setting has been saved
      if (empty($expiration_setting)) {
        $data[] = '[mailchimp_campaign|entity_type=node|entity_id=' . $item->nid . '|view_mode=' . $mode . ']';
      }
      // saved but exclusion setting is not set
      elseif ($expiration_setting['exclude'] == 0 || $expiration_setting['exclude'] == '') {
        $data[] = '[mailchimp_campaign|entity_type=node|entity_id=' . $item->nid . '|view_mode=' . $mode . ']';
      }
      // saved and exclusion setting is set
      else {
        // if this node is 6th place and expiration setting exclude 5
        if (!empty($node_position) && $node_position <= $expiration_setting['exclude']) {
          $data[] = '[mailchimp_campaign|entity_type=node|entity_id=' . $item->nid . '|view_mode=' . $mode . ']';
        }
      }
    }
  }
  return $data;
}

/**
 * Generate daily email items from the last campaign
 * @params
 * $type    type of news item
 */
function _slac_igp_email_generate_items($type, $last_campaign = array()) {
  $data = array();
  if ($type == 'promoted' || $type == 'regular_with_images') {
    $mode = VIEW_MODE_TEASER;
  } else {
    $mode = VIEW_MODE_LINK;
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'news_article')
    ->propertyCondition('status', 1);

  if ($type == 'promoted') {
    $query->propertyCondition('promote', 1);
  } else {
    $query->propertyCondition('promote', 0);
  }
  if (!empty($last_campaign)) {
    $query->propertyCondition('created', $last_campaign['timestamp'], '>');
  }
  $query->propertyOrderBy('created', 'DESC');
  $query->range(0, 10);
  $result = $query->execute();
  if (!empty($result)) {
    foreach ($result['node'] as $item) {
      // Remove nodes with or without images based on display.
      $node = node_load($item->nid);
      if (isset($node->field_news_image[LANGUAGE_NONE][0]['fid'])) {
        if ($mode == VIEW_MODE_LINK) {
          continue;
        }
      }
      else {
        if ($mode == VIEW_MODE_TEASER) {
          continue;
        }
      }
      $data[] = '[mailchimp_campaign|entity_type=node|entity_id=' . $item->nid . '|view_mode=' . $mode . ']';
    }
  }
  return $data;
}

function _slac_igp_email_generate_items_views($type, $last_campaign = array()) {

  $data = array();
  if ($type == 'promoted' || $type == 'regular_with_images') {
    $mode = VIEW_MODE_TEASER;
  } else {
    $mode = VIEW_MODE_LINK;
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'news_article')
    ->propertyCondition('status', 1);

  if ($type == 'promoted') {
    $query->propertyCondition('promote', 1);
  } else {
    $query->propertyCondition('promote', 0);
  }
  if (!empty($last_campaign)) {
    $query->propertyCondition('created', $last_campaign['timestamp'], '>');
  }
  $query->propertyOrderBy('created', 'DESC');
  $query->range(0, 10);
  $result = $query->execute();
  if (!empty($result)) {
    foreach ($result['node'] as $item) {
      // Remove nodes with or without images based on display.
      $node = node_load($item->nid);
      if (isset($node->field_news_image[LANGUAGE_NONE][0]['fid'])) {
        if ($mode == VIEW_MODE_LINK) {
          continue;
        }
      }
      else {
        if ($mode == VIEW_MODE_TEASER) {
          continue;
        }
      }
      // check to see if the given item belongs to any of the news views displays
      if (_slac_igp_email_check_in_view($item->nid) === TRUE) {
        $data[] = '[mailchimp_campaign|entity_type=node|entity_id=' . $item->nid . '|view_mode=' . $mode . ']';
      }
    }
  }
  return $data;
}

/**
 * Check to see if a given node (nid) exists in the news views
 * @param $nid
 * @return bool
 */
function _slac_igp_email_check_in_view($nid) {
  // @[views_name]|[view_display]
  $mapping = array(
    'news|block', // feature news
    'news|block_1', // lab news,
    'news|block_2', // slac science (featured)
    'news|block_3', // slac science
  );
  $items = array();
  foreach ($mapping as $view_meta) {
    $v = explode('|', $view_meta);
    $view_name = $v[0];
    $view_display = $v[1];

    $view = views_get_view($view_name);
    if ($view) {
      $view->execute($view_display);
      if (!empty($view->result)) {
        foreach ($view->result as $item) {
          $items[] = $item->nid;
        }
      }
    }
  }
  $items = array_unique($items);
  return in_array($nid, $items);
}


/**
 * Implements hook_form_FORM_ID_alter() for the Mailchimp configuration form.
 */
function slac_igp_email_form_mailchimp_dc_configuration_form_alter(&$form, &$form_state, $form_id) {
  if (empty($form_state['config'])) {
    return;
  }

  $config = $form_state['config'];

  $form['expiration_settings'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Views settings'),
    '#description' => t('Checking this will limit the generated daily email items to those that appears on the home page in addition to the time elapsed. This setting only effects daily email types.'),
    '#weight' => 0,
    '#default_value' => variable_get('mailchimp_dc_' . $config['name'] . '_daily_additional', 0),
  );
  $form['#submit'][] = 'slac_igp_email_mailchimp_expiration';
}

/**
 * Form submission callback
 * @param $form
 * @param $form_state
 */
function slac_igp_email_mailchimp_expiration($form, &$form_state) {
  $config = $form_state['config'];
  variable_set('mailchimp_dc_' . $config['name'] . '_daily_additional', $form_state['values']['expiration_settings']);
}

/**
 * hook_form_FORM_ID_alter() implementation for the Mailchimp campaign form.
 *
 * This replaces the "html_news" field with entity reference fields so that
 * users can more simply "link to" and reorder news articles. Ideally we could
 * just plop an entity reference field on the campaign entity, but that approach
 * didn't work because the mailchimp_campaign entities use hexadecimal IDs, and
 * Drupal's field system expects numeric entity IDs. And various attempts at
 * trying to finangle a field with the same functionality into place failed. So,
 * this so-dumb-it's-brilliant workaround; we have created another entity named
 * campaign_news, and put our fields on there. We create instances of that
 * entity which refer to mailchimp_campaign entities. We also hack those entity
 * fields on to this form.
 */
function slac_igp_email_form_mailchimp_campaign_campaign_form_alter(&$form, &$form_state) {
  // Give weights to all the "content" things so we can put things in between them later.
  $weight = 0;
  foreach (element_children($form['content']) as $field) {
    $form['content'][$field]['#weight'] = $weight += 10;
  }

  if (!empty($form_state['campaign'])) {
    if (isset($form_state['campaign']->mc_campaign_id)) {
      $efq = new EntityFieldQuery();
      $efq->entityCondition('entity_type', 'campaign_news')
        ->entityCondition('bundle', 'campaign_news')
        ->fieldCondition('field_campaign_id', 'value', $form_state['campaign']->mc_campaign_id)
        ->range(0, 1);
      if ($result = $efq->execute()) {
        $news_ref = entity_load('campaign_news', array_keys($result['campaign_news']));
        $news_ref = reset($news_ref);
      }
      else {
        if (!empty($form['content']['html_news'])) {
          try {
            $xml = new SimpleXMLElement('<div>' . $form['content']['html_news']['#default_value'] . '</div>');
            $lead_source = '';
            foreach ($xml->xpath('//div[@id="featured_news"]/div') as $div) {
              $lead_source .= (string)$div;
            }
            $xpath = $xml->xpath('//div[@id="sub_news"]');
            $sub_source = (string)$xpath[0];
          }
          catch (Exception $e) {
            // Parsing the ecks em ell probably failed.
            $lead_source = '';
            $sub_source = '';
          }
        }
        elseif (isset($form['content']['html_lead_news']) && isset($form['content']['html_sub_news'])) {
          $lead_source = $form['content']['html_lead_news']['#default_value'];
          $sub_source = $form['content']['html_sub_news']['#default_vaule'];
        }
        else {
          return;
        }

        // Load the references from the text field and make a campaign_news
        // entity of them.
        $news_ref = entity_create('campaign_news', array('type' => 'campaign_news'));
        $news_ref->field_campaign_id[LANGUAGE_NONE][0]['value'] = $form_state['campaign']->mc_campaign_id;

        if (preg_match_all('/\[mailchimp_campaign.+entity_id=(\d+).+\]/', $lead_source, $matches)) {
          foreach ($matches[1] as $id) {
            $news_ref->field_featured_news[LANGUAGE_NONE][] = array('target_id' => $id);
          }
        }
        if (preg_match_all('/\[mailchimp_campaign.+?entity_id=(\d+).+?\]/', $sub_source, $matches)) {
          foreach ($matches[1] as $id) {
            $news_ref->field_sub_news[LANGUAGE_NONE][] = array('target_id' => $id);
          }
        }
        entity_save('campaign_news', $news_ref);
      }
    }
    else {
      $news_ref = entity_create('campaign_news', array('type' => 'campaign_news'));
    }

    $form_state['news_ref'] = $news_ref;

    field_attach_form('campaign_news', $news_ref, $form, $form_state, NULL, array('field_name' => 'field_featured_news'));
    field_attach_form('campaign_news', $news_ref, $form, $form_state, NULL, array('field_name' => 'field_sub_news'));

    // Move the fields to where we want them to be
    $form['content']['field_featured_news'] = $form['field_featured_news'];
    unset($form['field_featured_news']);

    $form['content']['field_sub_news'] = $form['field_sub_news'];
    unset($form['field_sub_news']);

    if (isset($form['content']['html_news'])) {
      $form['content']['field_featured_news']['#weight'] = $form['content']['html_news']['#weight'] + 2;
      $form['content']['field_sub_news']['#weight'] = $form['content']['html_news']['#weight'] + 4;
      // Make the normal field invisible
      $form['content']['html_news']['#access'] = FALSE;
    }
    else {
      $form['content']['field_featured_news']['#weight'] = $form['content']['html_lead_news']['#weight'];
      $form['content']['field_sub_news']['#weight'] = $form['content']['html_sub_news']['#weight'];
      $form['content']['html_lead_news']['#access'] = FALSE;
      $form['content']['html_sub_news']['#access'] = FALSE;
    }

    // We're going to attach two submit handlers; one before the standard
    // callback so that we can format the "html_news" field value, and one after
    // so that we can update our campaign_news entity.
    $form['#submit'][] = 'slac_igp_email_form_mailchimp_campaign_campaign_form_submit';
    array_unshift($form['#submit'], 'slac_igp_email_form_mailchimp_campaign_campaign_form_presubmit');
  }
}

/**
 * "Presubmit" handler for the Mailchimp campaign form.
 *
 * Update the content of the "html_news" field based on the values of the
 * featured/sub_news fields.
 */
function slac_igp_email_form_mailchimp_campaign_campaign_form_presubmit(&$form, &$form_state) {
  if (isset($form_state['news_ref'])) {
    $featured_val = '<div id="featured_news">';
    // First, sort the results
    usort($form_state['values']['content']['field_featured_news'][LANGUAGE_NONE], '_field_sort_items_helper');
    usort($form_state['values']['content']['field_sub_news'][LANGUAGE_NONE], '_field_sort_items_helper');
    foreach ($form_state['values']['content']['field_featured_news'][LANGUAGE_NONE] as $feat_val) {
      if (!empty($feat_val['target_id'])) {
        $featured_val .= '<div class="item">[mailchimp_campaign|entity_type=node|entity_id=' . $feat_val['target_id'] . '|view_mode=teaser]</div><br clear="all" />';
      }
    }
    $featured_val .= '</div>';
    $sub_val = '<div id="sub_news">';
    foreach ($form_state['values']['content']['field_sub_news'][LANGUAGE_NONE] as $feat_val) {
      if (!empty($feat_val['target_id'])) {
        $sub_val .= '[mailchimp_campaign|entity_type=node|entity_id=' . $feat_val['target_id'] . '|view_mode=link]';
      }
    }
    $sub_val .= '</div>';
    if (isset($form_state['values']['content']['html_news'])) {
      $form_state['values']['content']['html_news']['value'] = $featured_val . $sub_val;
    }
    else {
      $form_state['values']['content']['html_lead_news']['value'] = $featured_val;
      $form_state['values']['content']['html_sub_news']['value'] = $sub_val;
    }
  }
}

/**
 * Submit handler for the Mailchimp campaign form.
 *
 * Update the associated campaign_news entity, if possible. Note that this will
 * *not* be possible if the entity has not been saved before, since we can't
 * reasonably get the newly-created MailChimp campaign ID from here. Instead,
 * we'll rely on the fact that a new entity will be created the next time the
 * form is viewed. This is awkward, but it should work…
 */
function slac_igp_email_form_mailchimp_campaign_campaign_form_submit(&$form, &$form_state) {
  if (isset($form_state['news_ref']) && isset($form_state['news_ref']->id)) {
    if ($news = entity_load('campaign_news', array($form_state['news_ref']->id))) {
      $news = reset($news);
      foreach (array('field_featured_news', 'field_sub_news') as $field) {
        $news->{$field} = array(LANGUAGE_NONE => array());
        foreach ($form_state['values']['content'][$field][LANGUAGE_NONE] as $item) {
          if (!empty($item['target_id'])) {
            $news->{$field}[LANGUAGE_NONE][] = $item;
          }
        }
      }
      entity_save('campaign_news', $news);
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * If a Mailchimp entity is being deleted and there's a campaign_news entity
 * which refers to it, delete it.
 */
function slac_igp_email_entity_delete($entity, $type) {
  if ($type === 'mailchimp_campaign') {
    $efq = new EntityFieldQuery();
    $efq->entityCondition('entity_type', 'campaign_news')
      ->entityCondition('bundle', 'campaign_news')
      ->fieldCondition('field_campaign_id', 'value', $entity->mc_campaign_id)
      ->range(0, 1);
    if ($result = $efq->execute()) {
      foreach (array_keys($result['campaign_news']) as $id) {
        entity_delete('campaign_news', $id);
      }
    }
  }
}

/**
 * Implements hook_filter_info().
 *
 * We're creating a filter to rewrite image paths to use the publically-
 * accessible copy of the image directory instead of one behind Webauth.
 */
function slac_igp_email_filter_info() {
  return array(
    'slac_img_path_rewrite' => array(
      'title' => t('Rewrite SLAC image paths'),
      'process callback' => 'slac_igp_email_img_path_rewrite',
      'weight' => 50,
    ),
  );
}

/**
 * Filter callback for our path rewriting filter.
 *
 * We're using just a dumb str_replace() here. But it's probably okay.
 *
 * @todo This works for the production site only theoretically at this point. It
 * may need tweaking after golive.
 */
function slac_igp_email_img_path_rewrite($text, $filter, $format, $langcode, $cache, $cache_id) {
  $stage_src = 'https://www.slac.stanford.edu/slac/www/' . SLAC_IGP_EMAIL_PUBLIC_SITE_DIR_ID_STAGE;
  $prod_src = 'https://www.slac.stanford.edu/slac/www/' . SLAC_IGP_EMAIL_PUBLIC_SITE_DIR_ID_PROD;
  
  $text = str_replace(
    array($stage_src, $prod_src),
    array(
      'https://intranet-stage.slac.stanford.edu/sites/intranet-stage.slac.stanford.edu/files/styles/mailchimp_news_teaser/public',
      // @todo Will the site directory be used on live? Or just "default" maybe?
      'https://intranet.slac.stanford.edu/sites/intranet.slac.stanford.edu/files/styles/mailchimp_news_teaser/public',
    ),
    $text
  );
  return $text;
}
