<?php
/**
 * @file
 * Code for the Event feature.
 */

include_once 'ct_event.features.inc';

/**
 * Implements hook_menu().
 */
function ct_event_menu() {
  $items['node/add/event/slac'] = array(
    'title' => 'Create a new Event',
    'page callback' => 'ct_event_custom_add',
    'access callback' => 'node_access',
    'access arguments' => array('create', 'event'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Page callback. Displays a page with links for different choices used for
 * creating an Event node.
 */
function ct_event_custom_add() {
  $content = '<p>' . t('This page provides links for creating Events. If you need to create an Access Notice instead, please use the appropriate link under "Other Options."') . '</p>';

  $event_items = array(
    l(t('Create an Event'), 'node/add/event'),
    l(t('Create an Event promoted as News'),
        'node/add/event',
        array(
          'query' => array(
            'edit[field_shared_promote_news][und]' => '1',
          ),
        )),
  );

  $list = array(
    'items' => $event_items,
    'title' => t('Event Options'),
  );

  $content .= theme('item_list', $list);

  $other_items = array(
    l(t('Create an Access Notice'), 'node/add/access-information'),
    l(t('Create an Access Notice promoted as News'),
        'node/add/access-information',
        array(
          'query' => array(
            'edit[field_shared_promote_news][und]' => '1',
          ),
        )),
    l(t('Create a standalone News article'), 'node/add/news'),
  );

  $list = array(
    'items' => $other_items,
    'title' => t('Other Options'),
  );

  $content .= theme('item_list', $list);

  return $content;
}

/**
 * Implements hook_preprocess_field()
 *
 * Add term name as a CSS class to term link field.
 */
function ct_event_preprocess_field(&$vars) {
  if ($vars['element']['#field_name'] == 'field_event_type') {
    $event_type = strtolower($vars['items'][0]['#title']);

    // Make alphanumeric (removes all other characters)
    $event_type = preg_replace("/[^a-z0-9_\s-]/", "", $event_type);

    // Clean up multiple dashes or whitespaces
    $event_type = preg_replace("/[\s-]+/", " ", $event_type);

    // Convert whitespaces and underscore to dash
    $event_type = preg_replace("/[\s_]/", "-", $event_type);

    $vars['items'][0]['#attributes'] = array('class' => array($event_type, 'page-icon',));
  }
}
