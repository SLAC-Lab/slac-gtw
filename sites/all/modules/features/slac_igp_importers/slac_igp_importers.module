<?php
/**
 * @file
 * Code for the SLAC IGP Importers feature.
 */
 
// news article tags that will be translated into news article type/status
DEFINE('SLAC_NEWS_INTERNAL', 'Internal');
DEFINE('SLAC_NEWS_EXTERNAL', 'External');
DEFINE('SLAC_NEWS_PROMOTED', 'Promoted');

// feed importer node title for importing events
DEFINE('SLAC_TRAINING_CALENDAR', 'Training Calendar');
DEFINE('SLAC_SCIENCE_CALENDAR', 'Scientific Calendar');
DEFINE('SLAC_STAFF_CALENDAR', 'Staff Calendar');

include_once 'slac_igp_importers.features.inc';

/**
 * Implements hook_libraries_info
 */
function slac_igp_importers_libraries_info() {
  $libraries['slac_igp_importers'] = array(
    'name' => 'Simple HTML DOM parser',
    'vendor url' => 'http://simplehtmldom.sourceforge.net',
    'download url' => 'http://sourceforge.net/projects/simplehtmldom/files',
    'version arguments' => array(
      'file' => 'simple_html_dom.php',
      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
      'lines' => 37,
    ),
    'files' => array(
      'php' => array(
        'simple_html_dom.php',
      ),
    ),
  );
  
  return $libraries;
}

/**
 * Implements hook_feeds_after_parse
 */
function slac_igp_importers_feeds_after_parse($source, $result) {
  switch($source->id) {
    case 'slac_news':
      _slac_igp_importers_feeds_news($result);
    break;
    case 'slac_events':
      _slac_igp_importers_feeds_event($source, $result);
    break;
    case 'slac_access_info':
      _slac_igp_importers_feeds_access($source, $result);
    break;
  }
}

/**
 * Internal Helper 
 * Extracting date information from access info
 */
function _slac_igp_importers_feeds_access($source, $result) {
  $library = libraries_load('slac_igp_importers');
  if (empty($library['loaded'])) {
    return;
  }
  
  foreach ($result->items as $key => $item) {
    $html = str_get_html($item['description']);
    $start_date = $html->find('span[class=date-display-start]', 0)->plaintext;
    $end_date = $html->find('span[class=date-display-end]', 0)->plaintext;
    
    // format date string, get rid of the "(All Day)
    // @todo: check if this works for non-all day event, right now not in RSS
    $pattern = '/\((.*?)\)/';
    $start_date = preg_replace($pattern, '', $start_date);
    $end_date = preg_replace($pattern, '', $end_date);
    
    $start_date = (!empty($start_date)) ? gmdate('Y-m-d H:i:s', strtotime($start_date)) : '';
    $end_date = (!empty($end_date)) ? gmdate('Y-m-d H:i:s', strtotime($end_date)) : '';
    
    $result->items[$key]['Blank source 1'] = $start_date;
    $result->items[$key]['Blank source 2'] = $end_date;
  }
}

/**
 * Internal Helper 
 * Extracting location and date from calendar rss feeds
 */
function _slac_igp_importers_feeds_event($source, $result) {
  // load the title from the feed importer source
  // we have to apply different parsing logic based on different
  // calendar RSS feed
  $title = '';
  if ($source->feed_nid !=0) {
    $importer_node = node_load($source->feed_nid);
    $title = $importer_node->title;
  }
  
  $library = libraries_load('slac_igp_importers');
  foreach ($result->items as $key => $item) {
    // try to match event location from title
    switch($title) {
      case SLAC_TRAINING_CALENDAR:
        // i.e. Supervisory and Managerial Skill Development Series: Performance Management (Bldg. 48, Redwood Conf. Room A)
        $pattern = '/\((.*?)\)/';
        preg_match($pattern, $item['title'], $match);
        if (!empty($match)) {
          if (array_key_exists(1, $match)) {
            $result->items[$key]['Blank source 1'] = $match[1];
            $result->items[$key]['title'] = preg_replace($pattern, '', $item['title']);
          }
        }
      break;
      case SLAC_SCIENCE_CALENDAR:
      break;
      case SLAC_STAFF_CALENDAR:
      break;
    }
    
    // extract and format date for calendar item
    // @todo: This does not handle multi-day event
    if (!empty($library['loaded'])) {
      $html = str_get_html($item['description']);
      $date = $html->find('span[class=date-display-single]', 0)->plaintext;
      $date_array = explode('-', $date);
      if (count($date_array) === 3) {
        $start_date =  $date_array[0] . ', ' . $date_array[1];
        $end_date = $date_array[0] . ', ' . $date_array[2];
        $result->items[$key]['Blank source 2'] = gmdate('Y-m-d H:i:s', strtotime($start_date));
        $result->items[$key]['Blank source 3'] = gmdate('Y-m-d H:i:s', strtotime($end_date));
      }
      // all day event such as Monday, June 3, 2013 (All day)
      if (count($date_array) === 1) {
        $pattern = '/\((.*?)\)/';
        $date_string = preg_replace($pattern, '', $date_array[0]);
        $result->items[$key]['Blank source 2'] = gmdate('Y-m-d H:i:s', strtotime($date_string));
        $result->items[$key]['Blank source 3'] = gmdate('Y-m-d H:i:s', strtotime($date_string));        
      }
    }
  }
}

/**
 * Internal Helper 
 * Extracting promoted, internal and/or external from <category> tags
 */
function _slac_igp_importers_feeds_news($result) {
  foreach ($result->items as $key => $item) {
    if (!empty($item['tags'])) {
      $result->items[$key]['tags'] = array_unique($item['tags']);
      $tags = array_flip($result->items[$key]['tags']);
      // Setting news types
      $result->items[$key]['Blank source 2'] = array();
      if (array_key_exists(SLAC_NEWS_INTERNAL, $tags)) {
        $result->items[$key]['Blank source 2'] = 'internal';
        unset($result->items[$key]['tags'][$tags[SLAC_NEWS_INTERNAL]]);
      }
      if (array_key_exists(SLAC_NEWS_EXTERNAL, $tags)) {
        $result->items[$key]['Blank source 2'] = 'external';
        unset($result->items[$key]['tags'][$tags[SLAC_NEWS_EXTERNAL]]);
      }
      // Setting promoted
      if (array_key_exists(SLAC_NEWS_PROMOTED, $tags)) {
        $result->items[$key]['Blank source 1'] = 1;
        unset($result->items[$key]['tags'][$tags[SLAC_NEWS_PROMOTED]]);
      }
    }
  }  
}