<?php
/**
 * @file
 * Code for the SLAC IGP Importers feature.
 */
 
// news article tags that will be translated into news article type/status
DEFINE('SLAC_NEWS_INTERNAL', 'Lab News');
DEFINE('SLAC_NEWS_EXTERNAL', 'SLAC Science');
DEFINE('SLAC_NEWS_PROMOTED', 'Promoted');

// feed importer node title for importing events
DEFINE('SLAC_TRAINING_CALENDAR', 'Training Calendar');
DEFINE('SLAC_SCIENCE_CALENDAR', 'Scientific Calendar');
DEFINE('SLAC_STAFF_CALENDAR', 'Staff Calendar');

include_once 'slac_igp_importers.features.inc';

/**
 * Implements hook_menu().
 */
function slac_igp_importers_menu() {
  return array(
    'node/add/event-import' => array(
      'title' => 'Event import (single)',
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('slac_igp_importers_import_single_event'),
      'access callback' => 'node_access',
      'access arguments' => array('create', 'event'),
    ),
  );
}

/**
 * Form callback for our new single event import form.
 */
function slac_igp_importers_import_single_event($form, $form_state) {
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Event page URL'),
    '#description' => t('Paste in the URL of an event on a SLAC site.'),
    '#required' => TRUE,
    '#weight' => 0,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return $form;
}

/**
 * Form validator for our single event import form.
 *
 * @see slac_event_import_single()
 */
function slac_igp_importers_import_single_event_validate($form, &$form_state) {
  // Load the page.
  $page = drupal_http_request($form_state['values']['url']);
  if ($page->code <= 0) {
    form_set_error('url', t('This does not appear to be a valid URL.'));
    return;
  }
  elseif ($page->code != 200) {
    form_set_error('url', t('Loading the page at this URL failed. Error code @code (@error).', array('@code' => $page->code, '@error' => empty($page->error) ? '?' : $page->error)));
    return;
  }
  // XML parsing is easy to fail. I know it's "wrong," but use regex to find
  // our calendar link.
  if (!preg_match('/\<meta name="slac-event-data" content="([^"]+)"/', $page->data, $matches)) {
    form_set_error('url', t('Event information could not be found on the page.'));
    return;
  }
  $data = drupal_json_decode(decode_entities($matches[1]));
  if ($data === NULL) {
    form_set_error('url', t('Parsing the event information for this event failed.'));
    return;
  }
  $form_state['event'] = $data;
}

/**
 * Form submission function for our single event import form.
 *
 * @see slac_event_import_single()
 */
function slac_igp_importers_import_single_event_submit($form, &$form_state) {
  // Ideally, we could leverage already-configured stuff (mappings, etc) for
  // this, but I can't find a way to do so - it doesn't seem very modular.
  $node = new stdClass();
  $node->type = 'event';
  node_object_prepare($node);
  $map = array(
    'title' => 'title',
    'body' => 'body',
    'field_slac_event_date' => 'field_event_date',
    'field_location' => 'field_event_location',
    'field_slac_event_link' => 'field_link',
  );
  // Let's do special handling for the Location field, since it's a, well,
  // location field on the external site, but a standard text field here. It
  // seems that only the "Name" field of the location is used, thoughâ€¦?
  if (isset($form_state['event']['field_location'])) {
    foreach ($form_state['event']['field_location'] as &$langgroup) {
      foreach ($langgroup as &$value) {
        $value['value'] = $value['name'];
      }
    }
  }
  foreach ($map as $source => $dest) {
    if (isset($form_state['event'][$source])) {
      $node->{$dest} = $form_state['event'][$source];
    }
  }
  node_save($node);
  // Let's redirect the user to the node edit form for the node we just created.
  $form_state['redirect'] = "node/{$node->nid}/edit";
  drupal_set_message(t('Event imported. Edit it below if necessary.'));
}


/**
 * Implements hook_libraries_info
 */
function slac_igp_importers_libraries_info() {
  $libraries['slac_igp_importers'] = array(
    'name' => 'Simple HTML DOM parser',
    'vendor url' => 'http://simplehtmldom.sourceforge.net',
    'download url' => 'http://sourceforge.net/projects/simplehtmldom/files',
    'version arguments' => array(
      'file' => 'simple_html_dom.php',
      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
      'lines' => 37,
    ),
    'files' => array(
      'php' => array(
        'simple_html_dom.php',
      ),
    ),
  );
  
  return $libraries;
}

/**
 * Implements hook_feeds_after_parse
 */
function slac_igp_importers_feeds_after_parse($source, $result) {
  switch($source->id) {
    case 'slac_news':
    if($result->title == 'W6 Staging')
    {
      var_dump($result);
      exit();
    }

      _slac_igp_importers_feeds_news($result);

    break;
    case 'slac_access_info':
      _slac_igp_importers_feeds_access($source, $result);
    break;
  }
}

/**
 * Internal Helper 
 * Extracting date information from access info
 */
function _slac_igp_importers_feeds_access($source, $result) {
  $library = libraries_load('slac_igp_importers');
  if (empty($library['loaded'])) {
    return;
  }
  
  foreach ($result->items as $key => $item) {  
    $html = str_get_html($item['description']);

    $date_find = $html->find('span[class=date-display-single]', 0);
    $date = is_object($date_find) ? $date_find->plaintext : '';

		// handle multiday or single day access notices
		if (!empty($date)) {
			$_date = substr($date, 0, strpos($date, '-'));
			$start_date = $_date . $html->find('span[class=date-display-start]', 0)->plaintext;
			$end_date = $_date . $html->find('span[class=date-display-end]', 0)->plaintext;
			
		}
		else {
    	$start_date = $html->find('span[class=date-display-start]', 0)->plaintext;
    	$end_date = $html->find('span[class=date-display-end]', 0)->plaintext;			
		}
		    
    $pattern = '/\((.*?)\)/';
    $start_date = preg_replace($pattern, '', $start_date);
    $end_date = preg_replace($pattern, '', $end_date);
    
    // convert date string to time first
    $start_date_time = strtotime($start_date);
    $end_date_time = strtotime($end_date);
    
    if (!$start_date_time) {
      // try to parse more complex date string such as (Wednesday, July 10, 2013 - 7:00a.m.)
      $start_date = substr($start_date, strpos($start_date, ',')+1); 
      $start_date = str_replace('-', ' ', $start_date);
      $start_date_time = strtotime($start_date);
    }
    if (!$end_date_time) {
      // try to parse more complex date string such as (Wednesday, July 10, 2013 - 7:00a.m.)
      $end_date = substr($end_date, strpos($end_date, ',')+1); 
      $end_date = str_replace('-', ' ', $end_date);
      $end_date_time = strtotime($end_date);
    }

    $start_date = (!empty($start_date)) ? gmdate('Y-m-d H:i:s', $start_date_time) : '';
    $end_date = (!empty($end_date)) ? gmdate('Y-m-d H:i:s', $end_date_time) : '';

    $result->items[$key]['Blank source 1'] = $start_date;
    $result->items[$key]['Blank source 2'] = $end_date;
  }
}

/**
 * Internal Helper 
 * Extracting promoted, internal and/or external from <category> tags
 */
function _slac_igp_importers_feeds_news($result) {
  foreach ($result->items as $key => $item) {
    if (!empty($item['tags'])) {
      $result->items[$key]['tags'] = array_unique($item['tags']);
      $tags = array_flip($result->items[$key]['tags']);
      // Setting news types
      $result->items[$key]['Blank source 2'] = array();
      if (array_key_exists(SLAC_NEWS_INTERNAL, $tags)) {
        $result->items[$key]['Blank source 2'] = 'internal';
        unset($result->items[$key]['tags'][$tags[SLAC_NEWS_INTERNAL]]);
      }
      if (array_key_exists(SLAC_NEWS_EXTERNAL, $tags)) {
        $result->items[$key]['Blank source 2'] = 'external';
        unset($result->items[$key]['tags'][$tags[SLAC_NEWS_EXTERNAL]]);
      }
            
      // Setting promoted
/*
      if (array_key_exists(SLAC_NEWS_PROMOTED, $tags)) {
        $result->items[$key]['Blank source 1'] = 1;
        unset($result->items[$key]['tags'][$tags[SLAC_NEWS_PROMOTED]]);
      }
*/
    }
  }  
}

/*
  Impliments hook_cron

  Apparently the feeds module tries to queue jobs to import the
  feeds but is not always sucessful in doing so. Lets ensure the
  feeds are imported.
*/
function slac_igp_importers_cron() {
  $query = db_select('feeds_source', 'fs');
  $query->fields('fs', array('id','feed_nid'));
  $query_or = db_or()
    ->condition("fs.id","slac_events","=")
    ->condition("fs.id","slac_news");
  $query = $query->condition($query_or);
  $results = $query->execute()->fetchAll();

  foreach ($results as $record) {
    // try catch to continue after a exception is thrown
    try {
      $importer = feeds_source($record->id, $record->feed_nid);
      $importer->startImport();
    }
    catch(Exception $e) {
    }
  }
}