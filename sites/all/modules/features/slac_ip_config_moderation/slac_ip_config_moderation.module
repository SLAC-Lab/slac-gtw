<?php
/**
 * @file
 * Code for the SLAC IP Config Moderation feature.
 */

include_once 'slac_ip_config_moderation.features.inc';

/**
 * Implements hook_permission().
 *
 * Creates new permissions for each node type that has moderation to control
 * which roles can edit drafts when the node is in certain moderation states.
 *
 * @see slac_ip_config_moderation_node_edit_access().
 */
function slac_ip_config_moderation_permission() {
  $node_types = node_type_get_types();
  $states = workbench_moderation_states();
  $permissions = array();

  foreach ($node_types as $type) {
    if (!workbench_moderation_node_type_moderated($type->type)) {
      continue;
    }

    foreach ($states as $state) {
      $perm_name = "create draft for $type->type nodes in $state->name state";
      $perm_title = t(
        'Create draft for %type nodes in %state state',
        array(
          '%type' => $type->name,
          '%state' => $state->label,
        ));

      $permissions[$perm_name] = array(
        'title' => $perm_title,
      );
    }
  }
  $permissions['view the moderation messages on any node'] = array(
    'title' => 'View the moderation messages on any node',
  );

  return $permissions;
}

/**
 * Implements hook_node_access().
 *
 * If the node has a moderation state, and is owned by the current user,
 * perform an additional permission check for the edit operation.
 *
 * Though most access checks will only allow or ignore, this check must return
 * NODE_ACCESS_DENY to prevent draft creation/editing if the permission is not
 * set because the node actually can be edited by its owner otherwise.
 */
function slac_ip_config_moderation_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if ($op == 'update' && isset($node->workbench_moderation['current'])) {
    $state = $node->workbench_moderation['current']->state;
    $perm = 'create draft for ' . $type . ' nodes in ' . $state . ' state';

    if (user_access($perm, $account) && $account->uid == $node->uid) {
      return NODE_ACCESS_ALLOW;
    }
    else {
      return NODE_ACCESS_DENY;
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_menu_alter().
 *
 * Adds custom access callback to hide the node view tab from non-editor users
 * when the node is Published.
 *
 * Adds custom access callback to prevent new drafts from being created by
 * normal auth. users when a node is in 'Needs Review' or 'Published' state.
 */
function slac_ip_config_moderation_menu_alter(&$items) {
  $items['node/%node/view']['access callback'] = 'slac_ip_config_moderation_node_view_access';
  $items['node/%node/view']['access arguments'] = array('view', 1);
}

/**
 * Menu access callback.
 * Do not render a 'View published' tab for normal users.
 *
 * This is not using hook_node_access because the user can still actually view
 * the node, this will only prevent the 'View published' tab from rendering.
 *
 * @return bool
 */
function slac_ip_config_moderation_node_view_access($op, $node) {
  global $user;

  if (!slac_ip_config_moderation_user_is_elevated($user)) {
    return FALSE;
  }

  // Do not bypass normal access.
  return node_access($op, $node);
}

/**
 * Checks the passed user for roles above a normal authenticated user.
 *
 * @param $user
 *   The user object to check the roles for.
 *
 * @return bool
 */
function slac_ip_config_moderation_user_is_elevated($user) {
  $elevated_roles = array(
    'editor',
    'manager',
    'administrator',
  );
  $roles_intersect = array_intersect($user->roles, $elevated_roles);

  return !empty($roles_intersect) || $user->uid == 1;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Unset the workbench_moderation node_view_alter so that we can control the visibility
 * of the workbench moderation messages.
 */
function slac_ip_config_moderation_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'node_view') {
    unset($implementations['workbench_moderation']);
  }
}

/**
 * Implements hook_node_view().
 *
 * Display messages about the node's moderation state. This replaces workflow_moderation_node_view so we can better control who can
 * view messages.
 */
function slac_ip_config_moderation_node_view($node, $view_mode = 'full') {
  
  // Show moderation state messages if we're on a node page and you are the
  // node author or have permission to see messages on any node.
  if (node_is_page($node) && $view_mode == 'full' && empty($node->in_preview)) {
    global $user;
    if (user_access('view the moderation messages on any node') || $user->uid == $node->uid) {
      workbench_moderation_messages('view', $node);
    }
  }
}
