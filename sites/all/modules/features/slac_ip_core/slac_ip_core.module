<?php
/**
 * @file
 * Code for the SLAC IP Core feature.
 */

include_once 'slac_ip_core.features.inc';
/**
 * @file
 * Code for the SLAC IP core feature.
 */

/**
 * Implements hook_entity_info().
 *
 * Defines new custom view modes for nodes.
 */
function slac_ip_core_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['headline'] = array(
    'label' => t('Headline'),
    'custom settings' => FALSE,
  );
  $entity_info['node']['view modes']['news_archive'] = array(
    'label' => t('News Archive'),
    'custom settings' => FALSE,
  );
  // Keying the following with just 'term_listing' breaks the Term context
  // in Panels.
  $entity_info['node']['view modes']['slac_term_listing'] = array(
    'label' => t('SLAC Term Listing'),
    'custom settings' => FALSE,
  );

  // The Search module provides a view mode of the same name so we don't need
  // to define this if the search module is enabled.
  if (!module_exists('search')) {
    $entity_info['node']['view modes']['search_result'] = array(
      'label' => t('Search result'),
      'custom settings' => FALSE,
    );
  }
}

/**
 * Implements hook_date_formats().
 */
function slac_ip_core_date_formats() {
  return array(
    array(
      'type' => 'slac_ip_access_date',
      'format' => 'g:i a, l, M j, Y',
      'locales' => array(),
    ),
    array(
      'type' => 'slac_ip_published_date',
      'format' => 'F j, Y',
      'locales' => array(),
    ),
  );
}

/**
 * Implements hook_date_format_types().
 */
function slac_ip_core_date_format_types() {
  return array(
    'slac_ip_access_date' => t('SLAC Access Info.: g:i a, l, M j, Y'),
    'slac_ip_published_date' => t('SLAC published date: F j, Y'),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function slac_ip_core_field_formatter_info() {
  return array(
    'slac_event_date_formatter' => array(
      'label' => t('SLAC Custom Event Date Format'),
      'field types' => array('datetime'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function slac_ip_core_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'slac_event_date_formatter':
      foreach ($items as $delta => $item) {
        $tz_db = new DateTimeZone($item['timezone_db']);
        $tz = new DateTimeZone($item['timezone']);
        $value1 = new DateTime($item['value'], $tz_db);
        $value1->setTimezone($tz);
        $value2 = new DateTime($item['value2'], $tz_db);
        $value2->setTimezone($tz);
        $interval = $value1->diff($value2);

        if ($interval->days == 0) {
          // Single day event.
          if (empty($item['value2']) || $item['value'] == $item['value2']) {
            // Single day, all day.
            // Format is `Wednesday, August 10, 2016, 7 (All Day)`
            $markup = t(
                '!date (All Day)',
                array(
                  '!date' => $value1->format('l, F d, Y'),
                ));
          }
          else {
            if ($value1->format('a') == $value2->format('a')) {
              // Times are both 'am' or both 'pm'.
              // Format is `Wednesday, August 10, 2016, 3-7 pm`
              $start_str = $value1->format('l, F d, Y, g');
              $end_str = $value2->format('g a');
            }
            else {
              // Times span am/pm.
              // Format is `Wednesday, August 10, 2016, 3 am-7 pm`
              $start_str = $value1->format('l, F d, Y, g a');
              $end_str = $value2->format('g a');
            }
            $markup = t(
              '!start-date-!end-date',
              array(
                '!start-date' => $start_str,
                '!end-date' => $end_str,
              ));
          }
        }
        else {
          // Multi-day event.
          // Format is `Wednesday, Aug. 10, 2016, 6 pm - Thursday, Aug. 11, 2016, 9 pm`
          $markup = t(
              '!start-date - !end-date',
              array(
                '!start-date' => $value1->format('l, M. d, Y, g a'),
                '!end-date' => $value2->format('l, M. d, Y, g a'),
              ));
        }

        $element[$delta] = array('#markup' => $markup);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_extra_fields().
 */
function slac_ip_core_field_extra_fields() {
  $extra = array();
  foreach (node_type_get_types() as $type) {
    $extra['node'][$type->type] = array(
      'display' => array(
        'content_type' => array(
          'label' => t('Extra field: Content type'),
          'weight' => -5,
          'type' => 'hidden',
        ),
        'created' => array(
          'label' => t('Post Date'),
          'weight' => -5,
          'type' => 'hidden',
        ),
        'author' => array(
          'label' => t('Author'),
          'weight' => -3,
          'type' => 'hidden',
        ),
      ),
    );
    if ($type->has_title) {
      $extra['node'][$type->type]['display']['title'] = array(
        'label' => t('Extra field: !title', array('!title' => $type->title_label)),
        'weight' => -4,
        'type' => 'hidden',
      );
    }
  }
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function slac_ip_core_node_view($node, $view_mode, $langcode) {
  $node->content['content_type'] = array(
    '#theme' => 'slac_ip_core_content_type',
    '#node' => $node,
    '#view_mode' => $view_mode
  );
  $node->content['created'] = array(
    '#theme' => 'slac_ip_core_created',
    '#node' => $node,
    '#view_mode' => $view_mode
  );
  // only return this in a non-full page situation
  if (!in_array($view_mode, array('default', 'full'))) {
    $node->content['title'] = array(
      '#theme' => 'slac_ip_core_title',
      '#node' => $node,
      '#view_mode' => $view_mode,
    );
  }
  $node->content['author'] = array(
    '#theme' => 'slac_ip_core_author',
    '#node' => $node,
    '#view_mode' => $view_mode,
  );
}

/**
 * Implements hook_theme().
 */
function slac_ip_core_theme($existing, $type, $theme, $path) {
  return array(
    'slac_ip_core_content_type' => array(
      'variables' => array('node' => NULL),
    ),
    'slac_ip_core_created' => array(
      'variables' => array('node' => NULL),
    ),
    'slac_ip_core_title' => array(
      'variables' => array('node' => NULL),
    ),
    'slac_ip_core_author' => array(
      'variables' => array('node' => NULL),
    ),
  );
}

function theme_slac_ip_core_content_type($variables) {
  $node = $variables['node'];
  $types = node_type_get_types($node);
  $human_name = $types[$node->type]->name;
  $output = '<div class="node-content-type">';
  $output .= $human_name;
  $output .= '</div>';
  return $output;
}

function theme_slac_ip_core_created($variables) {
  $node = $variables['node'];
  $output = '<div class="node-created">';
  $output .= date('F j, Y', $node->created);
  $output .= '</div>';
  return $output;
}

function theme_slac_ip_core_title($variables) {
  $node = $variables['node'];
  $entity_uri = entity_uri('node', $node);
  $output = '<h3 class="node-title">';
  $output .= l($node->title, $entity_uri['path']);
  $output .= '</h3>';
  return $output;
}

function slac_ip_core_author($variables) {
  $node = $variables['node'];
  $user = user_load($node->uid);
  $output = '<div class="node-author">';
  $output .= $user->name;
  $output .= '</div>';
  return $output;
}
