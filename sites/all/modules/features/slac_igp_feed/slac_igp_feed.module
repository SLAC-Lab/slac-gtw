<?php
/**
 * @file
 * Code for the SLAC IGP FEED feature.
 */

include_once 'slac_igp_feed.features.inc';

DEFINE('FEATURED_NEWS', 'Featured News');
DEFINE('LAB_NEWS', 'Lab News');
DEFINE('SLAC_SCIENCE', 'SLAC Science');

/**
 * Implements hook_views_api_alter
 */
function slac_igp_feed_views_api_alter(&$list) {
  // looking for views template in the module directory
  $list['slac_igp_feed']['template path'] = drupal_get_path('module', 'slac_igp_feed') . '/templates';
}

/**
 * Implements hook_preprocess_views_view
 * We manipulate the grouped result so only the next 3 grouped
 * days items will appear, each day should only display 2 entries
 */
function slac_igp_feed_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  if ($view->name === 'calendar') {
    $library = libraries_load('slac_igp_importers');
    if (empty($library['loaded'])) {
      return;
    }
    
    if ($vars['rows'] == '') {
      return;
    }
    
    $html = str_get_html($vars['rows']);
    $ret = $html->find('div[class=views-row-grouped]');
    if (count($ret) > 3) {
      // only display 3 upcoming grouped days
      $ret = array_slice($ret, 0, 3);
    }
    
    foreach ($ret as $key => $group) {
      $title[$key] = $group->find('h3', 0)->plaintext;
      $group_items = $group->find('div[class=views-row]');
      if (count($group_items) > 2) {
        // for each grouped day, only 2 events will show
        $ret[$key] = array_slice($group_items, 0, 2);
      } else {
        $ret[$key] = $group_items;
      }
    }
    
    $output = '';
    foreach ($ret as $key => $views_rows) {
      $output .= '<div class="views-row-grouped">';
      $output .= '<h3>' . $title[$key] . '</h3>';
      foreach ($views_rows as $row) {
        $output .= $row->__toString();
      }
      $output .= '</div>';
    }
    
    if ($output !== '') {
      $vars['rows'] = $output;
    }
  }
}

/**
 * Implements hook_node_insert
 * Automatically insert items into nodequeue based on type: internal/external
 * and if the item is promoted or not
 * IMPORTANT: we are assuming RSS feeds are sorted in decending order with newest items first
 */
function slac_igp_feed_node_insert($node) {
  if ($node->type === 'news_article') {
    module_load_include('inc', 'slac_igp_feed', 'slac_igp_feed.nodequeue');
    $lang = $node->language;
    $promoted = (bool) $node->promote;
    
    // if news article is promoted, regardless we will add them into the featured queue
    if ($promoted) {
      slac_igp_feed_node_add($node->nid, FEATURED_NEWS, FALSE);
      if (!empty($node->field_news_type[$lang])) {
        if ($node->field_news_type[$lang][0]['value'] === 'external') {
          // place it on top of the slac science queue
          slac_igp_feed_node_add($node->nid, SLAC_SCIENCE, TRUE);
        }
      } 
    }
    // not promoted
    else {
      if (empty($node->field_news_type[$lang])) {
        return;
      }
      switch($node->field_news_type[$lang][0]['value']) {
        case 'internal':
          slac_igp_feed_node_add($node->nid, LAB_NEWS, FALSE);
        break;
        case 'external':
          slac_igp_feed_node_add($node->nid, SLAC_SCIENCE, FALSE);
        break;
      }
    }
  }
}

/**
 * Implements hook_node_update
 */
function slac_igp_feed_node_update($node) {
  if ($node->type === 'news_article') {
    module_load_include('inc', 'slac_igp_feed', 'slac_igp_feed.nodequeue');
    $lang = $node->language;
    $promoted = (bool) $node->promote;
    $subqueues = array(FEATURED_NEWS, LAB_NEWS, SLAC_SCIENCE);
    // if the news article is promoted, take it out of other queue and place it into the featured news queu
    if ($promoted) {
      slac_igp_feed_node_remove($node->nid, $subqueues);
      slac_igp_feed_node_add($node->nid, FEATURED_NEWS, TRUE);
      if (!empty($node->field_news_type[$lang])) {
        if ($node->field_news_type[$lang][0]['value'] === 'external') {
          // also add it to top of the SLAC SCIENCE queue
          slac_igp_feed_node_add($node->nid, SLAC_SCIENCE, TRUE);
        }
      }
    }
    else {
      if (empty($node->field_news_type[$lang])) {
        return;
      }
      switch($node->field_news_type[$lang][0]['value']) {
        case 'internal':
          slac_igp_feed_node_remove($node->nid, $subqueues);
          slac_igp_feed_node_add($node->nid, LAB_NEWS, FALSE);
        break;
        case 'external':
          slac_igp_feed_node_remove($node->nid, $subqueues);
          slac_igp_feed_node_add($node->nid, SLAC_SCIENCE, FALSE);
        break;
      }
    }
  }
}