<?php
/**
 * @file
 * Code for the mailchimp dc module
 */

/** 
 * Implements hook_menu
 */
function mailchimp_dc_menu() {

  $items['admin/config/services/mailchimp/mcdc'] = array(
    'title' => 'Recurring Campaigns',
    'description' => 'Manage Recurring campaigns',
    'page callback' => 'mailchimp_dc_main',
    // 'page arguments' => array('mailchimp_dc_configuration_form'),
    'access arguments' => array('administer mailchimp campaigns'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
  );

  $items['admin/config/services/mailchimp/mcdc/add'] = array(
    'title' => 'Add Recurring Campaign',
    'description' => 'Add a new recurring campaign',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_dc_configuration_form'),
    'access arguments' => array('administer mailchimp campaigns'),
    'file' => 'mailchimp_dc.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  
  $items['admin/config/services/mailchimp/mcdc/%mailchimp_dc_config_instance/edit'] = array(
    'title' => 'Add Recurring Campaign',
    'description' => 'Add a new recurring campaign',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_dc_configuration_form', 5),
    'access arguments' => array('administer mailchimp campaigns'),
    'file' => 'mailchimp_dc.admin.inc',
    'type' => MENU_CALLBACK,
  );

 
  $items['admin/config/services/mailchimp/mcdc/%mailchimp_dc_config_instance/delete'] = array(
    'title' => 'Add Recurring Campaign',
    'description' => 'Add a new recurring campaign',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_dc_configuration_delete', 5),
    'access arguments' => array('administer mailchimp campaigns'),
    'file' => 'mailchimp_dc.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function mailchimp_dc_main() {
  
  // load all recurring campaigns
  module_load_include('inc', 'mailchimp_dc', 'mailchimp_dc.database');
  
  $records = mailchimp_dc_config_load_all();
  
  $rows = array();
  foreach ($records as $record) {
    $action_links = array(
      l('Edit', 'admin/config/services/mailchimp/mcdc/' . $record['name'] . '/edit'),
      l('Delete', 'admin/config/services/mailchimp/mcdc/' . $record['name'] . '/delete'),
    );
    $rows[] = array(
      $record['label'],
      $record['schedule_type'],
      date('Y-m-d', $record['created']),
      implode(' | ', $action_links),
    );
  }
    
  $header = array('name', 'type', 'last updated', 'action');
  
  $variables = array(
    'header' => $header,
    'rows' => $rows,
  );
  
  return theme('table', $variables);
}

/**
 * Load function to load a recurring campaign configuration
 */
function mailchimp_dc_config_instance_load($machine_name) {
  module_load_include('inc', 'mailchimp_dc', 'mailchimp_dc.database');
  return mailchimp_dc_config_load($machine_name);
}

/**
 * Implements hook_cron
 */
function mailchimp_cron() {
  // check today's date, if no daily campaign exist, we will create one
  module_load_include('inc', 'mailchimp_dc', 'mailchimp_dc.database');
  $dc = mailchimp_dc_load_dc(date('Y-m-d'));
  if (empty($dc)) {
    mailchimp_dc_campaign_create();    
  }  
}

/**
 * Implements hook_entity_delete
 */
function mailchimp_dc_entity_delete($entity, $type) {
  if ($type === 'mailchimp_campaign') {
    module_load_include('inc', 'mailchimp_dc', 'mailchimp.database');
    $campaign_id = $entity->mc_campaign_id;
    mailchimp_dc_delete_dc($campaign_id);    
  }
}

/**
 * Create a campaign based on Daily Campign settings
 */
function mailchimp_dc_campaign_create() {
  // if the campaign has not been created yet for the day, let's create the campaign
  $options = array(
    'title' => t('Daily Digest !today', array('!today' => date('Y-m-d'))),
    'subject' => t('!name Daily Digest !today', array('!name' => variable_get('mcdcfrom_name', variable_get('site_name', '')), '!today' => date('Y-m-d'))),
    'list_id' => variable_get('mcdc_list', array('')),
    'from_email' => variable_get('mcdc_from_email', variable_get('site_mail', '')),
    'from_name' => variable_get('mcdcfrom_name', variable_get('site_name', '')),
    'template_id' => variable_get('mcdc_template', array()),
  );
    
  // getting the template information
  $template_id = variable_get('mcdc_template', array());
  if (!empty($template_id)) {
    $mc_template = mailchimp_campaign_get_templates($template_id);
  }
  
  $template_sections = array();
  // if we have a template set, let's pass in the region information
  if ($mc_template) {
    foreach ($mc_template['info']['default_content'] as $section => $item) {
      $template_sections['html_' . $section] = array(
        'value' => $item,
        'format' => 'mailchimp_campaign',
      );
    }    
  } 
  else {
    $template_sections['html'] = array(
      'value' => '',
      'format' => 'mailchimp_campaign',
    );  
  }
    
  // default contents in case no one implements the hook
  $content = $template_sections;
  $contents = array_merge(module_invoke_all('mailchimp_dc_content', $template_sections), array());
  if (!empty($contents)) {
    $config = variable_get('mcdc_content', array());
    if (array_key_exists($config, $contents)) {
      // let's only replace ones declared
      foreach ($contents[$config]['content'] as $section => $item) {
        $content[$section] = $item;
      }
    }
  }
  
  $campaign_id = mailchimp_campaign_save_campaign($content, $options);
  if (isset($campaign_id)) {
    // save the dc meta information
    module_load_include('inc', 'mailchimp_dc', 'mailchimp.database');
    mailchimp_dc_save_dc($campaign_id);
    cache_clear_all('mailchimp_campaign_campaigns', 'cache');
  }
}

/**
 * Return contents from hook
 */
function _mailchimp_dc_content_options() {
  $options = array();
  $modules = module_implements('mailchimp_dc_content');
  if (!empty($modules)) {
    foreach ($modules as $module) {
      $function = $module . '_mailchimp_dc_content';
      $data = $function();
      if (!empty($data)) {
        foreach($data as $key => $items) {
          $options[$key] = $items['title'];
        }
      } 
    }
  }
  
  return $options;
}

/**
 * Implements hook_ctools_plugin_api
 */
/*
function mailchimp_dc_ctools_plugin_api($owner, $api) {
  if ($owner == 'mailchimp_dc' && $api == 'default_mailchimp_dc_preset') {
    return array('version' => 1);
  }
}
*/

/**
 * Implements hook_default_mymodule_preset
 */
/*
function mailchimp_dc_default_mailchimp_dc_presets() {
  $export = array();

  $preset = new stdClass;
  $preset->api_version = 1;
  $preset->name = 'default';
  $preset->label = 'Default';
  $preset->schedule_type = 'daily';
  $preset->schedule_type_setting = '';
  $preset->list = '';
  $preset->template = 9999;
  $preset->content = '';
  $preset->from_email = '';
  $preset->from_name = '';
  $preset->created = REQUEST_TIME;
  
  $export['default'] = $preset;

  return $export;
}
*/

/**
 * Implements hook_ctools_plugin_directory
 */
/*
function mailchimp_dc_ctools_plugin_directory($module, $type) {
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}
*/