<?php

/**
 * @file
 * Provides custom field formatter for nodes with Existing URL links.
 */

/**
 * Implements hook_field_formatter_info().
 */
function slac_ip_existingurl_field_formatter_info() {
  return array(
    'slac_existingurl_formatter' => array(
      'label' => t('SLAC ExistingURL Format'),
      'description' => t("Format output linked to this node's Existing URL field, if in use."),
      'field types' => array('text'),
    ),
    'slac_existingurl_image_formatter' => array(
      'label' => t('SLAC ExistingURL Image Format'),
      'description' => t("Format output linked to this node's Existing URL field, if in use."),
      'field types' => array('image'),
      'settings' => array('image_style' => ''),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * The custom formatter does not need the link option from the normal image
 * formatter since it will be selecting the URL based on the New/ Existing
 * setting.
 */
function slac_ip_existingurl_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $form =  image_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);

  unset($form['image_link']);

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function slac_ip_existingurl_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = '';

  if ($field['type'] == 'image') {
    $instance['display'][$view_mode]['settings']['image_link'] = '';
    $summary = image_field_formatter_settings_summary($field, $instance, $view_mode);
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function slac_ip_existingurl_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $url = _slac_ip_existingurl_get_path($entity_type, $entity);

  switch ($display['type']) {
    case 'slac_existingurl_formatter':

      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => l($item['value'], $url));
      }
      break;

    case 'slac_existingurl_image_formatter':
      // Update the image URL, will still be themed by theme_image_formatter().
      $display['settings']['image_link'] = '';
      $element = image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
      foreach ($element as $delta => $item) {
        $element[$delta]['#theme'] = 'slac_ip_existingurl_image_formatter';
        $element[$delta]['#path'] = $url;
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function slac_ip_existingurl_theme() {
  return array(
    'slac_ip_existingurl_image_formatter' => array(
      'variables' => array('item' => NULL, 'path' => NULL, 'image_style' => NULL),
    ),
  );
}

/**
 * Returns HTML for an image field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: Associative array of image data, which may include "uri", "alt",
 *     "width", "height", "title" and "attributes".
 *   - image_style: An optional image style.
 *   - path: the url to link to.
 */
function theme_slac_ip_existingurl_image_formatter($variables) {
  $item = $variables['item'];
  $image = array(
    'path' => $item['uri'],
  );

  if (array_key_exists('alt', $item)) {
    $image['alt'] = $item['alt'];
  }

  if (isset($item['attributes'])) {
    $image['attributes'] = $item['attributes'];
  }

  if (isset($item['width']) && isset($item['height'])) {
    $image['width'] = $item['width'];
    $image['height'] = $item['height'];
  }

  // Do not output an empty 'title' attribute.
  if (isset($item['title']) && drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  if ($variables['image_style']) {
    $image['style_name'] = $variables['image_style'];
    $output = theme('image_style', $image);
  }
  else {
    $output = theme('image', $image);
  }

  // The link path and link options are both optional, but for the options to be
  // processed, the link path must at least be an empty string.
  if (isset($variables['path'])) {
    $path = $variables['path'];
    // When displaying an image inside a link, the html option must be TRUE.
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }

  return $output;
}

/**
 * Helper function to get the URL to link to from the passed node.
 *
 * @param $entity_type
 *   The type of the passed entity, usually 'node'.
 * @param $entity
 *   The node to get the URL for.
 *
 * @return string
 *   The URL to link to for the passed node.
 */
function _slac_ip_existingurl_get_path($entity_type, $entity) {

  $new_existing = field_get_items($entity_type, $entity, 'field_shared_new_existing');
  $existing = FALSE;
  if (!empty($new_existing)) {
    $existing = (bool) ($new_existing[0]['value'] == 'Link to Existing URL');
  }

  if ($existing && !empty($entity->field_shared_existing_url)) {
    $existing_url = field_get_items($entity_type, $entity, 'field_shared_existing_url');
    $url = $existing_url[0]['safe_value'];
  }
  else {
    $url = '/';
    if (isset($entity->path['alias'])) {
      $url .= $entity->path['alias'];
    }
    else {
      $url .= $entity->path['source'];
    }
  }

  return $url;
}
