<?php

/**
 * @file
 * Manages automatic addition/removal of News nodes from queues.
 */

// Nodequeue machine names.
define('LAB_NEWS', 'lab_news');
define('SLAC_SCIENCE', 'slac_science_news');
define('FEATURED_NEWS', 'featured_news');

/**
 * Implements hook_node_insert().
 *
 * Automatically inserts News nodes into a queue based on the News Type field
 * and if the node is promoted or not.
 */
function slac_nodequeue_automation_node_insert($node) {

  // Only add a newly saved  node to the queue, if it's a news article or promoted, is new and is published
  if (slac_nodequeue_automation_is_news_or_promoted($node) && $node->is_new && $node->status) {
    $promoted = (bool) $node->promote;
    $news_type = _slac_nodequeue_automation_get_field_value($node, 'field_news_news_type');

    if (empty($news_type) && !$promoted) {
      return;
    }

    if ($promoted) {
      $queue_name = FEATURED_NEWS;
    }
    else {
      $queue_name = _slac_nodequeue_automation_get_name_for_type($news_type);
    }

    _slac_nodequeue_automation_node_add($node->nid, $queue_name);
  }
}

/**
 * Check if a node is news or promoted as news.
 *
 * @param $node
 *  The node object.
 *
 * @return Boolean
 *  Returns TRUE if the node is promoted as news 
 *  or is a news node. If not it returns FALSE.
 */
function slac_nodequeue_automation_is_news_or_promoted($node) {
  $content_type = $node->type;
  $content_types = array('news', 'event', 'access_information');
  if (!in_array($content_type, $content_types)) {
    return FALSE;
  }
  if ($content_type == 'news') {
    return TRUE;
  }

  // Check to see if the event or access information is promoted as news.
  if ($node->field_shared_promote_news[$node->language][0]['value']) {
    return TRUE; 
  }
  else {
    return FALSE;
  }
}

/**
 * Test for existence of this node in the given queue (by queue name).
 */
function _slac_test_for_node_in_node_queue ($nid, $queue_name) {

  $queue = _slac_nodequeue_automation_get_queue($queue_name);
  if (!empty($queue)) {
    $subqueue = _slac_nodequeue_automation_get_subqueue($queue->qid);
    if ($subqueue != NULL) {

      $queue_pos = nodequeue_get_subqueue_position( $subqueue->sqid, $nid);

      // If this node is not in this subqueue, it returns false, else it returns a non-false value
      return( nodequeue_get_subqueue_position( $subqueue->sqid, $nid));
    }
  }
  return false;
}

/**
 * Implements hook_node_update().
 */
function slac_nodequeue_automation_node_update($node) {

  if (!slac_nodequeue_automation_is_news_or_promoted($node)) {
    return;
  }

  $original = $node->original;

  $was_promoted = (bool) $original->promote;
  $promoted = (bool) $node->promote;

  $old_type = _slac_nodequeue_automation_get_field_value($original, 'field_news_news_type');
  $type = _slac_nodequeue_automation_get_field_value($node, 'field_news_news_type');

  // Calculate the old queue (see which queue this node is in currently, if any)
  if (_slac_test_for_node_in_node_queue($node->nid, LAB_NEWS)):
    $old_queue_name = LAB_NEWS;
  elseif (_slac_test_for_node_in_node_queue($node->nid, SLAC_SCIENCE)):
    $old_queue_name = SLAC_SCIENCE;
  elseif (_slac_test_for_node_in_node_queue($node->nid, FEATURED_NEWS)):
    $old_queue_name = FEATURED_NEWS;
  else: 
    $old_queue_name = NULL;
  endif;

  // Determine what the new queue should be
  if ( !$node->status ) {
    $new_queue_name = NULL;   // Node is not published so it shouldn't be in any queue
  }
  else {
    if ( $promoted ) {
      $new_queue_name = FEATURED_NEWS;  // It's promoted, so it should be in Featured News
    }
    else {
      // It's published but not promoted, so it's either in Lab News or SLAC Science queue, based on News type.
      $new_queue_name = _slac_nodequeue_automation_get_name_for_type($type);
    }
  }

  // Remove from old queue and add to new queue, if something has changed.
  if ($old_queue_name != new_queue_name) {
    if ($old_queue_name != NULL) {
       watchdog( "NODE-QUEUES", "Remove from queue: $old_queue_name  NODE:($node->nid) $node->title");      
       _slac_nodequeue_automation_node_remove($node->nid, $old_queue_name);
    }
    if ($new_queue_name != NULL) {
       watchdog( "NODE-QUEUES", "Add to queue: $new_queue_name  NODE:($node->nid) $node->title");      
      _slac_nodequeue_automation_node_add($node->nid, $new_queue_name);
    }
  }
}

/**
 * Get the nodequeue machine name associated with a given News Type value.
 *
 * @param $type
 *   The News Type to get the queue machine name for.
 *
 * @return null|string
 *   The nodequeue machine name for the given News Type, or NULL if it is not
 *   a known type.
 */
function _slac_nodequeue_automation_get_name_for_type($type) {
  switch ($type) {
    case 'Lab News':
      $queue_name = LAB_NEWS;
      break;

    case 'SLAC Science':
      $queue_name = SLAC_SCIENCE;
      break;

    default:
      $queue_name = NULL;
      break;
  }

  return $queue_name;
}

/**
 * Gets a single field value from the passed node.
 *
 * @param $node
 *   The node object to get the field value from.
 * @param $field_name
 *   The machine name of the field to get the value from.
 *
 * @return string
 *   The field value or empty string if there is no value.
 */
function _slac_nodequeue_automation_get_field_value($node, $field_name) {
  $items = field_get_items('node', $node, $field_name);
  return (!empty($items)) ? $items[0]['value'] : '';
}

/**
 * Adds the passed node id onto the specified nodequeue.
 *
 * @param $nid
 *   The node id to add to the queue.
 * @param $queue_name
 *   The machine name of the queue to add onto.
 */
function _slac_nodequeue_automation_node_add($nid, $queue_name) {

  $queue = _slac_nodequeue_automation_get_queue($queue_name);
  if (!empty($queue)) {
    $subqueue = _slac_nodequeue_automation_get_subqueue($queue->qid);

    if ($subqueue != NULL) {

      // Only add it to the queue, if it's not already in the queue
       watchdog( "NODE-QUEUES", "Node already in queue? $queue_name  NODE:($nid)");
      if (!_slac_test_for_node_in_node_queue($nid, $queue_name)) {
        nodequeue_subqueue_add($queue, $subqueue, $nid);
        watchdog( "NODE-QUEUES", "Added new node: $queue_name  NODE:($nid)");
      }
      else {
        watchdog( "NODE-QUEUES", "Node already exists in queue: $queue_name  NODE:($nid)");
      }
    }
  }
}

/**
 * Removes the passed node id from the specified nodequeue.
 *
 * @param $nid
 *   The node id to remove from the queue.
 * @param $queue_name
 *   The machine name of the queue to remove from.
 */
function _slac_nodequeue_automation_node_remove($nid, $queue_name) {
  $queue = _slac_nodequeue_automation_get_queue($queue_name);
  if (!empty($queue)) {
    $subqueue = _slac_nodequeue_automation_get_subqueue($queue->qid);

    if ($subqueue != NULL) {
      nodequeue_subqueue_remove_node($subqueue->sqid, $nid);
    }
  }
}

/**
 * Loads the queue information for the passed machine name.
 *
 * @param $queue_name
 *   The machine name of the nodequeue to load.
 *
 * @return object|array
 *   The queue object, or an empty array if it does not exist.
 */
function _slac_nodequeue_automation_get_queue($queue_name) {
  $queue = array();
  $qid_map = nodequeue_get_qid_map();
  if (isset($qid_map[$queue_name])) {
    $queue = nodequeue_load($qid_map[$queue_name]);
  }

  return $queue;
}

/**
 * Loads the subqueue information for the passed queue id.
 *
 * @param $qid
 *   The queue id to load subqueue information for.
 *
 * @return object|null
 *   The first subqueue object, or null if none exist.
 */
function _slac_nodequeue_automation_get_subqueue($qid) {
  $subqueues = nodequeue_load_subqueues_by_queue($qid);
  return array_shift($subqueues);
}
