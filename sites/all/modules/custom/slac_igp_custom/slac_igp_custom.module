<?php
/**
 * @file
 * Code for the SLAC IGP Custom module.
 */
define('FEATURED_NEWS_DISPLAY', 'field_news_image_display');

/**
 * Implements hook_theme
 */
function slac_igp_custom_theme() {
  return array(
    'slac_igp_weather' => array(
      'variables' => array(
        'weather' => NULL,
        'location' => NULL,
      ),
      'template' => 'slac_igp_weather',
    ),
    'slac_igp_node_teaser' => array(
      'render element' => 'elements',
      'preprocess functions' => array(
        'template_preprocess',
        'template_preprocess_node',
      ),
      'template' => 'slac_igp_node_teaser',
    ),
    'slac_igp_node_link' => array(
      'render element' => 'elements',
      'preprocess functions' => array(
        'template_preprocess',
        'template_preprocess_node',
      ),
      'template' => 'slac_igp_node_link',
    ),
  );  
}

/**
 * Implements hook_node_view_alter
 */
function slac_igp_custom_node_view_alter(&$build) {
  if ($build['#bundle'] === 'news_article') {
    if ($build['#view_mode'] == 'teaser') {
      $build['#theme'] = 'slac_igp_node_teaser';
      unset($build['links']);
      unset($build['#contextual_links']);
    } 
    
    if ($build['#view_mode'] == 'link')
      $build['#theme'] = 'slac_igp_node_link';
      unset($build['links']);
      unset($build['#contextual_links']);    
  }
}
 
/**
 * Implements hook_block_view_alter
 * Altering weather and traffic block
 */
function slac_igp_custom_block_view_alter(&$data, $block) {
  if ($block->delta === 'weather_block') {
      $path = base_path() . drupal_get_path('module', 'weather_block');
      $location = weather_set_location();
      $service = variable_get('weather_service');
      $services = variable_get('weather_services');
      if ($service === 'yahoo_weather') {
        $data['subject'] = t('Weather & Traffic');
        if (isset($_SESSION['weather_location']['id'])) {
          $weather = new Weather($_SESSION['weather_location']['id'], $service);
        }
        else {
          $weather =  new Weather($location->field_yahoo_weather['und'][0]['value'], $service);
        }
        
        $content = theme('slac_igp_weather', array('weather' => $weather, 'location' => $location->name));
        $box = boxes_box_load('weather_traffic');
        if (!empty($box)) {
          $block = $box->render();
          $content .=theme('boxes_box', array('block' => $block));
        }
        $data['content'] = $content;        
      }
  }
}

/**
 * Preprocess function for the weather block
 */
function slac_igp_custom_preprocess_slac_igp_weather(&$vars) {
  $weather = $vars['weather'];
  if (!$weather) {
    return;
  }
  
  $current = array(
    'condition' => (string) $weather->condition->condition->attributes()->text,
    'code' => (string) $weather->condition->condition->attributes()->code,
    'temp' => (string) $weather->condition->condition->attributes()->temp,
    'date' => (string) $weather->condition->condition->attributes()->date,
  );
  
  $i = 0;
  foreach($weather->condition->forecast as $item) {
  
    if ($i < 3) {
        switch($i) {
          case 0:
            $day = 'Today';
          break;
          case 1:
            $day = 'Tomorrow';
          break;
          default:
            $day = (string) $item->attributes()->day;
          break;
        }
      $forecast[] = array(
        'day' => $day,
        'date' => (string) $item->attributes()->date,
        'low' => (string) $item->attributes()->low,
        'high' => (string) $item->attributes()->high,
        'condition' => (string) $item->attributes()->text,
        'code' => (string) $item->attributes()->code,
      );
      $i++;      
    }
  }

  if (variable_get('weather_use_provider_weather_icons') == 1) {
    $vars['icon_path'] = "http://l.yimg.com/a/i/us/we/52/";
    $vars['default_icon'] = TRUE;
  }
  elseif (variable_get('weather_icons_path') != NULL) {
     if (drupal_substr(variable_get('weather_icons_path'), drupal_strlen(variable_get('weather_icons_path')) - 1) == "/") {
      $vars['icon_path'] = variable_get('weather_icons_path');
     }
     else {
       $vars['icon_path'] =variable_get('weather_icons_path') . "/";
     }
     
     $path_args = explode('/', $vars['icon_path']);
     if ($path_args[0] != base_path()) {
       $vars['icon_path'] = base_path() . $vars['icon_path'];
     }
     $vars['default_icon'] = FALSE;
  }
  
  $vars['forecast'] = $forecast;
  $vars['current'] = $current;
}


/**
 * Implements hook_help
 */
function slac_igp_custom_help($path,$arg){
    switch($path){
		case "admin/help#image_effect":
			 return '<p>'.t('add image effect to image module.').'</p>';
			 break;
	}
}

/**
 * Implements hook_image_effect_info
 * Create a custom image effect that adds white space to the side of image
 */
function slac_igp_custom_image_effect_info(){
  $effects=array();
  $effects['advance_resize']=array(
	'label'=>t('Advance Resize'),
	'help'=>t('Resize image with white background.'),
	'effect callback'=>'slac_igp_custom_advance_resize_effect',
	'dimensions callback' => 'image_resize_dimensions',
	'form callback' => 'image_resize_form',
	'summary theme' => 'image_resize_summary',
  );
  return $effects;
}

/**
 * Resize function callback
 */
function slac_igp_custom_advance_resize_effect(&$image,$data){
  if (!slac_igp_custom_image_advance_resize($image, $data['width'], $data['height'])) {
    watchdog('image', 'Image resize failed using the %toolkit toolkit on %path (%mimetype, %dimensions)', array('%toolkit' => $image->toolkit, '%path' => $image->source, '%mimetype' => $image->info['mime_type'], '%dimensions' => $image->info['width'] . 'x' . $image->info['height']), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;

}

/**
 * Performing image resize
 */
function slac_igp_custom_image_advance_resize(stdClass $image, $width, $height) {
  $w=$width;
  $h=$height;
  $src_x=0;
  $src_y=0;
  $src_w=$image->info['width'];
  $src_h=$image->info['height'];
  $src_image = $image->resource;
  $dst_w=$src_w;
  $dst_h=$src_h;
  $dst_x=0;
  $dst_y=0;
  if($w>$src_w)
	  $dst_x=($w-$src_w)/2;
  if($h>$src_h)
	  $dst_y=($h-$src_h)/2;
  $dst_image = imagecreatetruecolor($w,$h);
  $backgroundColor = imagecolorallocate($dst_image, 255, 255, 255);
  imagefill($dst_image, 0, 0, $backgroundColor);
  imagecopyresampled($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);
  imagedestroy($src_image);
  $image->resource = $dst_image;
  $image->info['width'] = $w;
  $image->info['height'] = $h;
  return TRUE;
}


/**
 * Implements hook_field_formatter_info().
 * Creating a custom image formatter that allow user to select alternative image styles
 */
function slac_igp_custom_field_formatter_info() {
  return array(
    'image_igp' => array(
      'label' => t('IGP custom'),
      'field types' => array('image'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function slac_igp_custom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'image_igp':
    $render = '';
    if (property_exists($entity, FEATURED_NEWS_DISPLAY)) {
    	if (!empty($entity->{FEATURED_NEWS_DISPLAY})) {
    		// getting the image style selected from this content
    		$image_style = $entity->{FEATURED_NEWS_DISPLAY}[LANGUAGE_NONE][0]['value'];
    		$load = image_style_load($image_style);
    		if (!empty($load)) {
    			$render = $image_style;	
    		}	
    	}
    }
    foreach ($items as $delta => $item) {
   		if ($render == '') {
				$element[$delta] = array(
					'#theme' => 'image',
					'#path' => $item['uri'],
				);   			
   		} 
   		else {
				$element[$delta] = array(
					'#theme' => 'image_style',
					'#style_name' => $render,
					'#path' => $item['uri'],
				);   			
   		}
    }
    break;
  }
  return $element;
}

/**
 * Implements hook_flush_caches()
 *
 * Rational: File streams are being broken on clear cache runs. Essentially, 
 * the only way to fix this is to re-check the folder and file permissions to
 * update the stream.
 */
function slac_configuration_flush_caches() {
  slac_configuration_file_presave(NULL);

  // return empty array as we aren't actually clearing caches
  return array();
}

/**
 * Implements hook_file_presave()
 */
function slac_configuration_file_presave($file) {
  // This function does not actually modify the file object, it simply checks 
  // the folders files may get saved into. 
  $form['file_public_path'] = array(
    '#value' => variable_get('file_public_path', conf_path() . '/files'),
  );
  $form['file_private_path'] = array(
    '#value' => variable_get('file_private_path', ''),
  );
  $form['file_temporary_path'] = array(
    '#value' => variable_get('file_temporary_path', file_directory_temp()),
  );
  
  foreach ($form as $element) {
    @system_check_directory($element);
  }
}