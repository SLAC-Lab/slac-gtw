<?php
/**
 * @file
 * Code for the SLAC IGP Custom module.
 */



/**
 * Implements hook_mailchimp_dc_content
 */
function slac_igp_custom_mailchimp_dc_content($template_sections = array()) {

  $content = array(
    'html' => array(
    'value' => 'This is some test markup stuff',
    'format' => 'mailchimp_campaign',
    ),
  );
  
  $data['SLAC_DD'] = array(
    'module' => 'slac_igp_custom',
    'title' => t('SLAC daily digest'),
    'content' => _slac_igp_custom_mailchimp_dc_content($template_sections),  
  );
    
  return $data;
}

/**
 * Generate html markup for the daily digest
 */
function _slac_igp_custom_mailchimp_dc_content($template_sections) {
  if (!module_exists('slac_igp_feed')) {
    return;
  }
  
  module_load_include('inc', 'slac_igp_feed', 'slac_igp_feed.nodequeue');
    
  $sub_queue_featured_lab = slac_igp_feed_get_subqueue('Featured Lab News');
  $featured_lab_node = nodequeue_load_front($sub_queue_featured_lab->sqid);
  if (!empty($featured_lab_node)) {
    $featured_lab = '[mailchimp_campaign|entity_type=node|entity_id=' . $featured_lab_node->nid . '|view_mode=teaser]';
  }
  $lab_news = array();
  $sub_queue_lab = slac_igp_feed_get_subqueue('Lab News');
  $lab_nodes = nodequeue_load_nodes($sub_queue_lab->sqid, FALSE, 0, 3, TRUE);
  if (!empty($lab_nodes)) {
    foreach($lab_nodes as $node) {
      $lab_news[] = '[mailchimp_campaign|entity_type=node|entity_id=' . $node->nid . '|view_mode=link]';
    }
  }
  $sub_queue_science = slac_igp_feed_get_subqueue('SLAC Science');
  $featured_science_node = nodequeue_load_front($sub_queue_science->sqid);
  if (!empty($featured_science_node)) {
    $featured_science = '[mailchimp_campaign|entity_type=node|entity_id=' . $featured_science_node->nid . '|view_mode=teaser]';
  }
  $science_news = array();
  $science_nodes = nodequeue_load_nodes($sub_queue_science->sqid, FALSE, 1, 3, TRUE);
  if (!empty($science_nodes)) {
    foreach($science_nodes as $node) {
      $science_news[] = '[mailchimp_campaign|entity_type=node|entity_id=' . $node->nid . '|view_mode=link]';
    }
  }
  
  $output = array(
    $featured_lab,
    implode('<br />', $lab_news),
    $featured_science,
    implode('<br />', $science_news),
  );
  
  return implode('<br />', $output);  
}

/**
 * Implements hook_theme
 */
function slac_igp_custom_theme() {
  return array(
    'slac_igp_weather' => array(
      'variables' => array(
        'weather' => NULL,
        'location' => NULL,
      ),
      'template' => 'slac_igp_weather',
    ),
  );  
}
 
/**
 * Implements hook_block_view_alter
 */
function slac_igp_custom_block_view_alter(&$data, $block) {
  if ($block->delta === 'weather_block') {
      $path = base_path() . drupal_get_path('module', 'weather_block');
      $location = weather_set_location();
      $service = variable_get('weather_service');
      $services = variable_get('weather_services');
      if ($service === 'yahoo_weather') {
        $data['subject'] = '';
        if (isset($_SESSION['weather_location']['id'])) {
          $weather = new Weather($_SESSION['weather_location']['id'], $service);
        }
        else {
          $weather =  new Weather($location->field_yahoo_weather['und'][0]['value'], $service);
        }
        $data['content'] = theme('slac_igp_weather', array('weather' => $weather, 'location' => $location->name));
        
      }/*
 else {
        // use default weather block implementation
        $data = weather_block_block_view($block->delta);        
      }
*/
  }
}

/**
 * Preprocess function for the weather block
 */
function slac_igp_custom_preprocess_slac_igp_weather(&$vars) {
  $weather = $vars['weather'];
  
  $current = array(
    'condition' => (string) $weather->condition->condition->attributes()->text,
    'code' => (string) $weather->condition->condition->attributes()->code,
    'temp' => (string) $weather->condition->condition->attributes()->temp,
    'date' => (string) $weather->condition->condition->attributes()->date,
  );
  
  $i = 0;
  foreach($weather->condition->forecast as $item) {
  
    if ($i < 3) {
        switch($i) {
          case 0:
            $day = 'Today';
          break;
          case 1:
            $day = 'Tomorrow';
          break;
          default:
            $day = (string) $item->attributes()->day;
          break;
        }
      $forecast[] = array(
        'day' => $day,
        'date' => (string) $item->attributes()->date,
        'low' => (string) $item->attributes()->low,
        'high' => (string) $item->attributes()->high,
        'condition' => (string) $item->attributes()->text,
        'code' => (string) $item->attributes()->code,
      );
      $i++;      
    }
  }

  if (variable_get('weather_use_provider_weather_icons') == 1) {
    $vars['icon_path'] = "http://l.yimg.com/a/i/us/we/52/";
    $vars['default_icon'] = TRUE;
  }
  elseif (variable_get('weather_icons_path') != NULL) {
     if (drupal_substr(variable_get('weather_icons_path'), drupal_strlen(variable_get('weather_icons_path')) - 1) == "/") {
      $vars['icon_path'] = variable_get('weather_icons_path');
     }
     else {
       $vars['icon_path'] =variable_get('weather_icons_path') . "/";
     }
     
     $path_args = explode('/', $vars['icon_path']);
     if ($path_args[0] != base_path()) {
       $vars['icon_path'] = base_path() . $vars['icon_path'];
     }
     $vars['default_icon'] = FALSE;
  }
  
  $vars['forecast'] = $forecast;
  $vars['current'] = $current;
}